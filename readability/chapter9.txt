This game introduces many new concepts, but don’t worry. You’ll experiment with these programming concepts in the interactive shell first. String and list values have functions associated called methods. You’ll also learn about a new type of loop called a for loop and a new type of data type called a dictionary. Once you understand these concepts, it will be much easier to program Hangman.

This chapter's game is a bit longer than the previous games, but much of it is the ASCII art for the hangman pictures. Enter the following into the file editor and save it as hangman.py.

The Hangman program is going to randomly select a secret word from a list of secret words. The random module will provide this ability.

...the rest of the code is too big to show here...

This “line” of code is a simple variable assignment, but it actually stretches over several real lines in the source code. The actual “line” doesn’t end until line 58. To help you understand what this code means, you should learn about multi-line strings and lists:

Ordinarily when you write strings in your source code, the string has to be on one line starting and ending with a one quote character. However, if you use three quotes the string can go across several lines:

These are called multi-line strings. If you didn't have multi-line strings, you would use the \n escape character to represent the new lines. But this is hard to read in the source code:

Within the multi-line string, Python ignores the indentation rules it normally has for where blocks end:

You may have noticed that HANGMANPICS's name is in all capitals. This is the programming convention for constant variables. Constants are variables whose values are not meant to be changed. Although you can change HANGMANPICS (just like any other variable), the all-caps reminds the programmer to not write code that does so.

Constant variables are helpful for describing values that have a special meaning. Since the multi-string value never changes, there is no reason we couldn't copy this multi-line string each time we needed that value. The HANGMANPICS variable never varies. But it is much shorter to type HANGMANPICS than it is to type that large multi-line string.

Like all conventions, you don’t have to follow it. But doing it this way makes it easier to understand how your variables are used.

A list value can contain several other values inside of itself. Try entering this into the interactive shell: ['apples', 'oranges', 'HELLO WORLD'].

This list value contains three string values. Just like any other value, you can store this list in a variable. The individual values inside of a list are also called items.

Try entering animals = ['aardvark', 'anteater', 'antelope', 'albert'] into the interactive shell to store a list in the variable animals. The square brackets can also be used to get an item from a list. Try entering animals[0], or animals[1], or animals[2], or animals[3] into the interactive shell to see how they evaluate.

The number between the square brackets is the index. In Python, the index of the first item in a list is 0. The second item is at index 1, the third item is at index 2, and so on. Lists are good when we have to store several values but don’t want variables for each one. Otherwise, the code would look like this:

This would be hard if you have hundreds or thousands of strings. But a list can easily contain any number of values. Using the square brackets, you can treat items in the list just like any other value. Try entering animals[0] + animals[2] into the interactive shell:

If you try accessing an index that is too large, you’ll get an index error that will crash your program. Try entering animals[9999] into the interactive shell:

You can also use the square brackets to change the value of an item in a list. Try entering animals[1] = 'ANTEATER', then type animals to view the list.

The second item in the animals list has been overwritten with a new string. So animals[1] will not only evaluate to the second item in the list, but you can also use it on the left side of an assignment statement to assign a value as the second item in the list.

You can join lists together into one list with the + operator, just like you can join strings. When joining lists, this is known as list concatenation. Try entering [1, 2, 3, 4] + ['apples', 'oranges'] + ['Alice', 'Bob'] into the interactive shell:

Lists don’t have to store values of the same data type. The example above has a list with both integers and strings in it. Both values must be lists in a list concatenation. ['apples'] + ['oranges'] will evaluate to ['apples', 'oranges']. But ['apples'] + 'oranges' will result in an error because you are adding a list value and string value instead of two list values. If you want to add non-list values to a list, use the append() method (which is described later).

The in operator can find if a value is inside a list or not. Expressions that use the in operator return a Boolean value: True if the value is in the list and False if it isn’t. Try entering 'antelope' in animals into the interactive shell:

The expression 'antelope' in animals returns True because the string 'antelope' can be found in the list, animals. (It is located at index 2.)

But if we type the expression 'ant' in animals, this will return False because the string 'ant' doesn’t exist in the list.

The in operator also works for strings. You check if one string exists in another the same way you check if a value exists in a list. Try entering 'hello' in 'Alice said hello to Bob.' into the interactive shell. This expression will evaluate to True.

You can remove items from a list with a del statement. (“del” is short for “delete.”) Try creating a list of numbers by typing: spam = [2, 4, 6, 8, 10] and then del spam[1]. Type spam to view the list's contents:

Notice that when you deleted the item at index 1, the item that used to be at index 2 became the new value at index 1. The item that used to be at index 3 moved to be the new value at index 2. Everything above the item that we deleted moved down one index. We can type del spam[1] again and again to keep deleting items from the list:

Just remember that del is a statement, not a function or an operator. It doesn’t have parentheses or evaluate to a return value.

Lists are a data type that can contain other values. But these items can also be other lists. Let’s say you have a list of groceries, a list of chores, and a list of your favorite pies. You can put all three of these lists into another list. Try entering this into the interactive shell:

To get an item inside the list of lists, you would use two sets of square brackets like this: listOfLists[1][2] which would evaluate to the string 'go grocery shopping'. This is because listOfLists[1] evaluates to the list ['clean', 'mow the lawn', 'go grocery shopping'][2]. That finally evaluates to 'go grocery shopping'.

Figure 9-1 is another example of a list of lists, along with some of the indexes that point to the items. The arrows point to indexes of the inner lists themselves. The image is also flipped on its side to make it easier to read:

Methods are just like functions that are attached to a value. For example, all string values have a lower() method, which returns a copy of the string value in lowercase. You cannot just call lower() by itself and you do not pass a string argument to lower() (as in lower('Hello')). You must attach the method call to a specific string value using a period. The next section introduces two string methods as examples.

Try entering 'Hello world!'.lower() into the interactive shell to see an example of this method:

There is also an upper() method for strings, which returns a string with all the characters in uppercase. Try entering 'Hello world'.upper() into the interactive shell:

Because the upper() method returns a string, you can call a method on that string also. Try entering 'Hello world!'.upper().lower() into the interactive shell:

'Hello world!'.upper() evaluates to the string 'HELLO WORLD!', and then we call that string's lower() method. This returns the string 'hello world!', which is the final value in the evaluation.

The order is important. 'Hello world!'.lower().upper() isn’t the same as 'Hello world!'.upper().lower():

This evaluation looks like this:

If a string is stored in a variable, you can call a string method on that variable. Look at this example:

Note that this does not change the value in spam. The spam variable will still contain 'Hello world!'.

The list data type also has methods. The reverse() method will reverse the order of the items in the list. Try entering spam = [1, 2, 3, 4, 5, 6, 'meow', 'woof'], and then spam.reverse() to reverse the list. Then enter spam to view the contents of the variable.

The most common list method you’ll use is append(). This method will add the value you pass as an argument to the end of the list. Try entering the following into the interactive shell:

Note that integers and floats don’t have any methods.

Line 59 is a long line of code, but it is really just a simple assignment statement. This line also uses the split() method, which is a method for the string data type (just like the lower() and upper() methods).

This assignment statement has just one long string, full of words separated by spaces. And at the end of the string the split() method. The split() method evaluates to a list with each word in the string as a single list item. The “split” occurs wherever a space occurs in the string.

The reason we do it this way instead of just writing out the list is that it is easier to type. If you created it as a list to begin with, we would have to type: ['ant', 'baboon', 'badger',... and so on, with quotes and commas for every word. The split() method can be useful in other ways, but on line 59 it is just used to save the programmer some tedious typing.

For an example of how the split() string method works, try entering this into the interactive shell:

The result is a list of nine strings, one string for each of the words in the original string. The spaces are not included in any of the items in the list.

You can also add your own words to the string on line 59, or remove any you don’t want to be in the game. Just make sure that the words are separated by spaces.

How the Code Works

Line 61 defines a the getRandomWord() function, which has a single parameter named wordList. This function will return a single secret word from the list in the wordList parameter.

On line 63, we will store a random index for this list in the wordIndex variable. We do this by calling randint() with two arguments. The first argument is 0 and the second argument is len(wordList) - 1. The second argument is an expression that is first evaluated. len(wordList) will return the integer size of the parameter, and then subtract one.

The reason you need the - 1 is because the indexes for lists start at 0, not 1. If we have a list of three items, the index of the first item is 0, the index of the second item is 1, the index of the third item is 2. The length of this list is 3, but the index 3 would be after the last index. This is why line 63 subtracts 1 from the length.

The wordIndex variable will be set to a random index for the list passed as the wordlist parameter. On line 64, we would return the element in wordList at the integer index stored in wordIndex.

Let’s pretend ['apple', 'orange', grape'] was passed as the argument to getRandomWord() and that randint(0, 2) returned the integer 2. That would mean that line 64 would become return wordList[2], which would evaluate to return 'grape'. This is how the getRandomWord() returns a random string in the wordList list.

So the input to getRandomWord() is a list of strings, and the return value output is a randomly selected string in that list. This will be useful for the Hangman game.

Next you need a function which will print the hangman board on the screen. It will also display how many letters the player has correctly (and incorrectly) guessed.

This code defines a new function named displayBoard(). This function has four parameters:

•   HANGMANPICS - A list of multi-line strings that will display the board as ASCII art. (The global HANGMANPICS variable will be passed for this parameter.)

•   missedLetters - A string of the letters the player has guessed that are not in the secret word.

•   correctLetters - A string of the letters the player has guessed that are in the secret word.

•   secretWord – A string of the secret word that the player is trying to guess.

The first print() function call will display the board. HANGMANPICS will be a list of strings for each possible board. HANGMANPICS[0] shows an empty gallows, HANGMANPICS[1] shows the head (this happens when the player misses one letter), HANGMANPICS[2] shows a head and body (this happens when the player misses two letters), and so on until HANGMANPICS[6] which shows the full hangman.

The number of letters in missedLetters will reflect how many incorrect guesses the player has made. Call len(missedLetters) to find out this number. So, if missedLetters is 'aetr' then len('aetr') will return 4. Printing HANGMANPICS[4] will display the appropriate hangman board for 4 misses. This is what HANGMANPICS[len(missedLetters)] evaluates to.

Line 70 prints the string 'Missed letters:' with a space character at the end instead of a newline. Remember that the keyword argument end=' ' uses only one = sign (like =), not two (like ==).

Line 71 is a new type of loop, called a for loop. A for loop often uses the range() function. Both are explained in the next two sections.

When called with one argument, range() will return a range object of integers from 0 up to (but not including) the argument. This range object can be converted to the more familiar list data type with the list() function. Try entering list(range(10)) into the interactive shell:

The list() function is similar to the str() or int() functions. It just converts the object it is passed into a list. It’s easy to generate huge lists with the range() function. Try entering in list(range(10000)) into the interactive shell:

The list is so huge, that it won't even all fit onto the screen. But you can store the list into a variable:

If you pass two arguments to range(), the list of integers it returns is from the first argument up to (but not including) the second argument. Try entering list(range(10, 20)) into the interactive shell:

The range() is often used in for loops (which are much like the while loops we have already seen).

The for loop is useful for looping over a list of values. This is different from the while loop, which loops as long as a certain condition is True. A for statement begins with the for keyword, followed by a new variable name, followed by the in keyword, followed by a sequence, and then a colon. The sequence is often a range object returned from range() but can also be a list.

Each time the program execution iterates through the loop the new variable in the for statement takes on the value of the next item in the list.

The range object returned by range(5) is equivalent to a the list [0, 1, 2, 3, 4]. The first time the execution goes through the code in for-block, the variable i will be set to 0. On the next iteration, i will be set to 1, and so on.

The for statement automatically converts the range object returned by range() into a list, so there is no need for list(range(5)) in the for statement. Just use range(5).

Lists and strings are also a sequence data type just like lists so you can use them in for statements. Try entering this into the interactive shell:

The for loop is similar to the while loop, but when you only need to iterate over items in a list, using a for loop is much less code to type. You can make a while loop that acts the same as a for loop by adding extra code:

But using the for statement automatically does all this extra code for you and makes programming easier since we have less to type.

The rest of the displayBoard() function displays the missed letters and creates the string of the secret word with all the unguessed letters as blanks.

The for loop on line 71 will iterate over each character in the missedLetters string and print them on the screen. Remember that the end=' ' will replace the newline character that is printed after the string with a single space character.

For example, if missedLetters was 'ajtw' this for loop would display a j t w.

List slicing creates a new list value with a subset of another list’s items. In code, specify two indexes (the beginning and end) and a colon in the square brackets after a list. For example, try entering the following into the interactive shell:

The expression spam[1:3] evaluates to a list that contains all the items from index 1 up to (but not including) index 3 in spam.

If you leave out the first index, Python will automatically think you want to specify index 0 for the first index:

If you leave out the second index, Python will automatically think you want to specify the rest of the list:

Slicing is a simple way to get a subset of the items in a list. You use slices with strings in the same way you use them with lists. Each character in the string is like an item in the list. Try entering the following into the interactive shell:

The next part of the code in Hangman uses slicing.

Now you want code to print the secret word, but with blank lines for the letters that have not been guessed. You can use the _ character (called the underscore character) for this. You can first create a string with nothing but one underscore for each letter in the secret word. Then we can replace the blanks for each letter in correctLetters.

So if the secret word was 'otter' then the blanked out string would be '_____' (five _ characters). If correctLetters was the string 'rt' you would change the string to '_tt_r'. Here is the code that does that:

Line 75 creates the blanks variable full of _ underscores using string replication. Remember that the * operator can also be used on a string and an integer, so the expression '_' * 5 evaluates to '_____'. This will make sure that blanks has the same number of underscores as secretWord has letters.

Line 77 has a for loop to go through each letter in secretWord and replace the underscore with the actual letter if that letter exists in correctLetters.

Pretend the value of secretWord is 'otter' and the value in correctLetters is 'tr'. You would want the string '_tt_r' displayed to the player. Let’s figure out how to create this string.

Line 77’s len(secretWord) call would return 5. The range(len(secretWord)) call becomes range(5), which in turn returns the list [0, 1, 2, 3, 4].

Because the value of i will take on each value in [0, 1, 2, 3, 4], then code in the for loop is the same as this:

If you are confused as to what the value of something like secretWord[0] or blanks[3:] is, then look at Figure 9-2. It shows the value of the secretWord and blanks variables, and the index for each letter in the string.

If you replace the list slices and the list indexes with the values that they represent, the loop code would be the same as this:

The above three code examples all do the same thing when secretWord is 'otter' and correctLetters is 'tr'. The first box is the actual code we have in our game. The second box shows code that does the same thing except without a for loop. The third box is the same as the second box, except we have evaluated many of the expressions from the second box.

The next few lines of code display the new value of blanks with spaces in between each letter.

This for loop will print each character in the string blanks. Remember that by now, blanks may have some of its underscores replaced with the letters in secretWord. The end keyword argument in line 82's print() call makes the print() function put a space character at the end of the string instead of a newline character. This is the end of the displayBoard() function.

The getGuess() function will be called when the player types in a letter to guess. The function returns the letter the player guessed as a string. Further, getGuess() will make sure that the player types a valid letter before returning from the function.

The getGuess() function has a string parameter called alreadyGuessed which should be passed a string that contains the letters the player has already guessed. Then it asks the player to guess a single letter. This single letter will be the return value for this function.

We will use a while loop because we want to keep asking the player for a letter until they enter text that is a single letter they have not guessed previously. Notice that the condition for the while loop is simply the Boolean value True. That means the only way execution will ever leave this loop is by executing a break statement (which leaves the loop) or a return statement (which leaves the entire function).

The code inside the loop asks the player to enter a letter, which is stored in the variable guess. If the player entered a capitalized letter, it will be converted to lowercase on line 90.

If the catName variable is equal to the string 'Fuzzball', then the if statement’s condition is True and we tell the user that her cat is fuzzy. However, if this condition is False, then Python tries the elif (“else if”) statement’s condition next. If catName is 'Spots', then the 'Your cat is spotted.' string is printed to the screen. If both are False, then we tell the user her cat isn’t fuzzy.

You can think of if-elif-else statements as saying “If this is true, do this. Or else if this next condition is true, do that. Or else if none of them are true, do this last thing.”

You can have as many elif statements as you want. the above code looks like this:

If the condition for the if statement is False, then the program will check the condition for the first elif statement (which is catName == 'Spots'). If that condition is False, then the program will check the condition of the next elif statement. If all of the conditions for the if and elif statements are False, then the code in the else-block executes.

But if one of the elif conditions are True, the elif-block code is executed and then execution jumps down to the first line past the else-block. So only one of the blocks in this if-elif-else statement will be executed. You can also leave off the else-block if you don’t need one, and just have an if-else statement.

The guess variable contains player’s letter guess. The program needs to make sure they typed in one and only one lowercase letter. If they didn't, Python should loop back and ask them again.

Line 91’s condition checks if guess is not one character long. Line 93’s condition checks if guess already exists inside the alreadyGuessed variable. Line 95’s condition checks if guess is not a lowercase letter.

If all of these conditions are False, then the else statement’s block executes and getGuess() returns the value in guess on line 98.

Remember, only one of the blocks in the if-elif-else statements will be executed.

The playAgain() function has just a print() function call and a return statement. The return statement has an expression that looks complicated, but we can break it down. Once we evaluate this expression to a value, that value will be returned from this function.

The expression on line 103 doesn’t have any operators, but it does have a function call and two method calls. The function call is input() and the method calls are lower() and startswith('y'). Remember that method calls are function calls that are attached by a period to the value on their left. lower() is attached to the return value of input().

input() returns a string of the text that the user typed in. Here's a step by step look at how Python evaluates this expression if the user types in YES.

The point of the playAgain() function is to let the player type in yes or no to tell the program if they want to play another round of Hangman. If the player types in YES, then the return value of input() is the string 'YES'. And 'YES'.lower() returns the lowercase version of the attached string. So the return value of 'YES'.lower() is 'yes'.

But there’s the second method call, startswith('y'). This function returns True if the associated string begins with the string parameter between the parentheses, and False if it doesn’t. The return value of 'yes'.startswith('y') is True.

Now we have evaluated this expression! We can see that what this does is let the player type in a response, we lowercase the response, check if it begins with the letter 'y' or 'Y', and then return True if it does and False if it doesn’t. Whew!

On a side note, there is also a endswith(someString) string method that will return True if the string ends with the string in someString and False if it doesn’t. endswith() is sort of like the opposite of startswith().

That’s all the functions we are creating for this game!

•   getRandomWord(wordList) will take a list of strings passed to it as a parameter, and return one string from it. That is how we will choose a word for the player to guess.

•   displayBoard(HANGMANPICS, missedLetters, correctLetters, secretWord) will show the current state of the board, including how much of the secret word the player has guessed so far and the wrong letters the player has guessed. This function needs four parameters passed to work correctly. HANGMANPICS is a list of strings that hold the ASCII art for each possible hangman board. correctLetters and missedLetters are strings made up of the letters that the player has guessed that are in and not in the secret word. And secretWord is the secret word the player is trying to guess. This function has no return value.

•   getGuess(alreadyGuessed) takes a string of letters the player has already guessed and will keep asking the player for a letter that is a letter that he hasn’t already guessed. (That is, a letter that isn’t in alreadyGuessed.) This function returns the string of the acceptable letter the player guessed.

•   playAgain() is a function that asks if the player wants to play another round of Hangman. This function returns True if the player does and False if the player doesn’t.

We’ll now start the code for the main part of the game, which will call the above functions as needed.

The main part of the code starts at line 106. Everything previous was just function definitions and a very large variable assignment for HANGMANPICS.

Line 106 is the first actual line that executes in our game. Start by assigning a blank string for missedLetters and correctLetters since the player hasn’t guessed any missed or correct letters yet.

The getRandomWord(words) call will evaluate to a randomly selects word in the words list value.

Then we also set a variable named gameIsDone to False. The code will set gameIsDone to True when we want to signal that the game is over and the program should ask the player if they want to play again.

The while loop’s condition is always True, which means we will always loop forever until a break statement is encountered.

Line 113 calls our displayBoard() function, passing it the list of hangman ASCII art pictures and the three variables we set on lines 107, 108, and 109. Based on how many letters the player has correctly guessed and missed, this function displays the appropriate hangman board to the player.

The getGuess() function needs all the letters in missedLetters and correctLetters combined, so concatenate the strings in these variables and pass the result as the argument. This argument is needed by getGuess() because the function has code to check if the player types in a letter that they have already guessed.

If the guess string exists in secretWord, then concatenate guess to the end of the correctLetters string. This string will be the new value of correctLetters.

How can the program know if the player has guessed every letter in the secret word? Well, correctLetters has each letter that the player correctly guessed and secretWord is the secret word itself. We can’t just check if correctLetters == secretWord because consider this situation: if secretWord was the string 'otter' and correctLetters was the string 'orte', then correctLetters == secretWord would be False even though the player has guessed each letter in the secret word.

The only way we can be sure the player won is to go through each letter in secretWord and see if it exists in correctLetters. If, and only if, every letter in secretWord exists in correctLetters will the player have won.

You can loop through each letter in secretWord and if we find a letter that doesn’t exist in correctLetters, we know that the player has not guessed all the letters. The new variable foundAllLetters is set to True on line 122 before the loop begins. The loop starts out assuming that all the letters in the secret word have been found. But the loop’s code will change foundAllLetters to False the first time it finds a letter in secretWord that isn’t in correctLetters (line 125).

If all letters in the secret word have been found, the player is told they have won and gameIsDone is set to True.

This is the start of the else-block. Remember, the code in this block will execute if the condition was False. But which condition? To find out, point your finger at the start of the else keyword and move it straight up. You’ll see that the else keyword's indentation is the same as the if keyword's indentation on line 118.

So if the condition on line 118 (guess in secretWord) was False, then the execution moves into this else-block. Otherwise, it skips down past the else-block to line 140.

Because the player’s guessed letter was wrong, it is concatenated to the missedLetters string. This is like what you did on line 119 when the player guessed correctly.

Remember that each time the player guesses wrong, the code concatenates the wrong letter to the string in missedLetters. So the length of missedLetters (or, in code, len(missedLetters)) is also the number of wrong guesses.

The HANGMANPICS list has 7 ASCII art strings. So when len(missedLetters) equals 6, we know the player has lost because the hangman picture will be finished. Remember, HANGMANPICS[0] is the first item in the list, and HANGMANPICS[6] is the last one.

So why is the code on line 134 len(missedLetters) == len(HANGMANPICS) - 1, instead of len(missedLetters) == 6? Pretend that we add another string to the HANGMANPICS list (maybe a picture of the full hangman with a tail, or a third mutant arm). Then the last picture in the list would be at HANGMANPICS[7]. So not only would we have to change the HANGMANPICS list with a new string, but we would also have to remember to change line 134 to len(missedLetters) == 7. Using len(missedLetters) == len(HANGMANPICS) - 1 will work no matter how many ASCII art strings are in HANGMANPICS.

So, when the length of the missedLetters string is equal to len(HANGMANPICS) - 1, the player has run out of guesses. The secret word is printed and gameIsDone variable is set to True.

If the player won or lost after guessing their letter, the game should ask the player if they want to play again. The playAgain() function handles getting a yes or no from the player, so it is called on line 141.

If the player does want to play again, the values in missedLetters and correctLetters must be reset to blank strings, gameIsDone to False, and a new secret word for secretWord.

This way when the execution loops back to the beginning of the loop on line 112, the board will be back to a fresh game.

If the player typed in 'no' when asked if they wanted to play again, then line 141’s condition would be False and the else-block executes. The break statement causes the execution to jump to the first line after the loop. But because there is no more code after the loop, the program terminates.

This has been a long chapter, and you’ve been introduced to several new concepts. But Hangman has been our most advanced game yet. As your games get more and more complex, it’ll be a good idea to sketch out a flow chart on paper of what happens in your program.

Methods are just like functions, except that are associated with values. Methods return values just like functions return values.

A for loop iterates over the items in a list. The range() function is often used with for loops because it is an easy way to create lists of sequential numbers.

The else-if statement will execute its block if their condition is True and the previous if and elif conditions are False.

