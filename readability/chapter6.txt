You’ve already used a few functions: print(), input(), random.randint(), str(), and int(). You’ve called these functions to execute the code inside them. In this chapter, you’ll write our own functions for your programs to call. A function is like a mini-program inside a program. Functions let you run the same code multiple times without copying and pasting the source code. Instead, you can put that code inside a function and call the function several times. This has the added benefit that if the function’s code has a mistake, you only have one place in the program to change it.

The game you will create in this chapter is called “Dragon Realm”. The player decides between two caves which hold either treasure or certain doom.

In this game, the player is in a land full of dragons. The dragons all live in caves with their large piles of collected treasure. Some dragons are friendly and share their treasure with you. Other dragons are hungry and eat anyone who enters their cave. The player is in front of two caves, one with a friendly dragon and the other with a hungry dragon. The player must choose between the two.

Open a new file editor window by clicking on the File ► New Window. In the blank window that appears type in the source code and save the source code as dragon.py. Then run the program by pressing F5.

One thing to know as you read the code below: The blocks that follow the def lines define a function, but the code in that block doesn’t execute until the function is called. The code doesn’t execute each line in this program in top down order. This is explained in more detail later in this chapter.

IMPORTANT NOTE! The programs in this book will only run on Python 3, not Python 2. When the IDLE window starts, it will say something like “Python 3.4.0” at the top. If you have Python 2 installed, you can have Python 3 installed at the same time. To download Python 3, go to https://python.org/download/.

If you get errors after typing this code in, compare it to the book’s code with the online diff tool at http://invpy.com/diff/dragon.

This program imports two modules. The random module will provide the random.randint() function like it did in the “Guess the Number” game. In Dragon Realm, we will also want some time-related functions that the time module includes, so we will import that too.

Line 4 is a def statement. The def statement doesn’t call a function. Instead, the def statement creates, that is, defines, a new function that you can call later in the program. After we define this function, we can call it the same way we call other functions. When we call this function, the code inside the def-block will be executed.

We also say we define variables when we create them with an assignment statement. The code spam = 42 defines the variable spam.

Figure 6-1 shows the parts of a def statement. It has the def keyword followed by a function name with parentheses and then a colon (the : sign). The block after the def statement called the def-block.

Remember, the def statement doesn’t execute the code, it only defines what code is executed when the function is later called. When the program’s execution reaches a def statement, it skips down to the first line after the def-block. When the displayIntro() function is called on line 38, the execution moves inside of the function to the first line of the def-block. All of the print() calls are run and the “You are in a land full of dragons...” introduction is displayed to the user.

Later in the program when line 38 calls the displayIntro() function, the execution jumps to the start of the function on line 5. When the function's block ends, the execution returns to the line 38 and then moves down as normal.

A function's def statement and the def-block has to come before you call the function. This is like how you must assign a value to a variable before you can use the variable. If you put the function call before the function definition, you’ll get an error. Look at this code:

If you try to run it, Python will give you an error message that looks like this:

To fix this, put the function definition before the function call:

Here we are defining another function called chooseCave(). The code in this function prompts the user to select which cave they should go into, either 1 or 2.

Line 12 creates a new variable called cave and stores a blank string in it. Then a while loop begins. The condition contains a new operator you haven't seen before called and. Just like the - or * are mathematical operators, and == or != are comparison operators, the and operator is a Boolean operator.

Boolean logic deals with things that are either True or False. Boolean operators compare two Boolean values and evaluate to a single Boolean value. The and Boolean operator combines two Boolean values to produce a new Boolean value.

Think of the sentence, “Cats have whiskers and dogs have tails.” “Cats have whiskers” is true and “dogs have tails” is also true, so the entire sentence “Cats have whiskers and dogs have tails” is true.

But the sentence, “Cats have whiskers and dogs have wings” would be false. Even though “cats have whiskers” is true, dogs do not have wings, so “dogs have wings” is false. In Boolean logic, things can only be entirely true or entirely false. Because of the word “and”, the entire sentence is only true if both parts are true. If one or both parts are false, then the entire sentence is false.

The and operator in Python is the same. If the Boolean values on both sides of the and keyword are True, then the expression with the and operator evaluates to True. If either of the Boolean values are False, or both of the Boolean values are False, then the expression evaluates to False.

Try entering the following expressions with the and operator into the interactive shell:

The or operator works similar to the and operator, except it will evaluate to True if either of the two Boolean values are True. The only time the or operator evaluates to False is if both of the Boolean values are False.

Try entering the following into the interactive shell:

The not operator only works on one value, instead of combining two values. The not operator evaluates to the opposite Boolean value. The expression not True will evaluate to False and not False will evaluate to True.

Try entering the following into the interactive shell:

If you ever forget how the Boolean operators work, you can look at these charts, which are called truth tables:

The condition has two parts connected by the and Boolean operator. Python first evaluates these parts to get their Boolean values. Then we evaluate the Boolean values with the and operator.

The first time the while statement’s condition is checked, cave is set to the blank string, ''. The blank string doesn’t equal the string '1', so the left side evaluates to True. The blank string also doesn’t equal the string '2', so the right side evaluates to True. So the condition then turns into True and True. Because both Boolean values are True, the condition finally evaluates to True. And because the while statement’s condition is True, the program execution enters the while-block.

This is what the evaluation of the condition looks like (if the value of cave is the blank string):

Line 14 asks the player to enter which cave they chose. Line 15 lets the player types 1 or 2 and hit ENTER. Whatever string the player typed will be stored in cave. After this code is executed, the execution loops back to the top of the while statement and rechecks the condition.

If the player typed in 1 or 2, then cave will either be '1' or '2'. This makes the condition False, and the program execution will continue past the while loop.

But if the player typed 3 or 4 or HELLO, our program doesn’t know how to react to that input. When the execution loops back, the condition will be True which causes the program to asks the player again. Python will keep asking the player to enter a cave until they type 1 or 2. This will guarantee that once the execution moves on, the cave variable contains a valid value for the program.

This is a return statement, which only appears inside def-blocks. Remember how the input() function returns a string value that the player typed in? The chooseCave() function will also return a value. Line 17 returns the string that is stored in cave, either '1' or '2'.

Once the return statement executes, the program execution jumps immediately out of the def-block. (This is like how the break statement will make the execution jump out of a while-block.) The program execution moves back to the line with the function call. The function call itself will evaluate to the return value.

Skip down the program and look at line 40 for a moment:

When the chooseCave() is later called by the program on line 40, the return value is stored in the caveNumber variable. The while loop guarantees that chooseCave() will only return either '1' or '2' as its return value.

So when line 17 returns a string, the function call on line 40 evaluates to this string, which is then stored in caveNumber.

Think about how the program’s variables are forgotten after the program terminates. These variables created while the execution is inside a function call are the same. The variables are created when the function is called and forgotten when the function returns.

Not only that, but when execution is inside the function, you cannot change the variables outside of the function, including variables inside other functions. This is because these variables exist in a different “scope”. All variables exist in either the global scope or a function call’s local scope.

The scope outside of all functions is called the global scope. The scope inside of a function (for the duration of a particular function call) is called a local scope. The entire program has only one global scope, and each function has a local scope of its own.

Variables defined in the global scope can be read outside and inside functions, but can only be modified outside of all functions. Variables created in a function call can only be read or modified during that function call.

You can read the value of global variables from the local scope, but attempting to change a global variable from the local scope won’t work. What Python actually does in that case is create a local variable with the same name as the global variable. So you could, for example, have a local variable named spam at the same time as having a global variable named spam. But Python will consider these to be two different variables.

Look at this example to see what happens when you try to change a global variable from inside a local scope. The comments explain what is going on:

When a variable is created determines what scope the variable is in. A variable is created the first time we use it in an assignment statement. When the Dragon Realm program first executes the line:

...the variable cave is created inside the chooseCave() function. This means it is created in the chooseCave() function’s local scope. It will be forgotten when chooseCave() returns, and will be recreated if chooseCave() is called a second time. The value of a local variable isn’t remembered in between function calls.

The next function the program defines is named checkCave(). Notice that the text chosenCave in between the parentheses. This is a parameter: a local variable that is assigned the argument passed in when this function is called.

Remember how for some function calls like str() or randint(), you would pass an argument in between the parentheses:

You will also pass an argument to checkCave(). This argument is stored in a new variable named chosenCave. These variables are also called parameters.

Parameters are local variables created when a function is called. For example, here is a short program that demonstrates defining a function with a parameter:

If we run this program, it would look like this:

When you call sayHello(), an argument is passed which is assigned to the name parameter. Parameters are just ordinary local variables. Like all local variables, the values in parameters will be forgotten when the function call returns.

Remember that calling the function random.randint() required you execute import random first? In the Dragon Realm game, you imported the time module on line 2. The time module has a function called sleep(). This function will pause the program for a few seconds. Line 21 passes the integer value 2 so that time.sleep() will pause the program for 2 seconds.

Here the code prints some more text and waits for another 2 seconds. These short pauses add suspense to the game, instead of displaying all the text all at once. In the previous chapter’s Jokes program, you called the input() function to wait until the player pressed the ENTER key. Here, the player doesn’t have to do anything except wait.

What happens next? And how does the program decide what happens? This is explained in the next section.

The program randomly choses which cave had the friendly dragon in it. Line 28 calls the random.randint() function which will return either 1 or 2. This integer value is stored in friendlyCave.

Line 30 checks if the player’s chosen cave in the chosenCave variable ('1' or '2') is equal to the       friendly dragon cave.

The value in chosenCave is a string because input() returns strings. But the value in friendlyCave is an integer because random.randint() returns integers. We can’t compare strings and integers with the == sign, because they will always be different. '1' doesn’t equal 1 and '2' doesn’t equal 2.

So friendlyCave is passed to str() function, which returns the string value of friendlyCave. This way the values will be the same data type and can be meaningfully compared to each other. This code could also have been used:

The above if statement’s condition would compare the integer value returned by the int() function to the integer value in friendlyCave. This code would also work.

If the condition is True, line 31 tell the player they have won the treasure.

Line 32 is an else statement. The else keyword always comes after the if-block. The else-block that follows the else keyword executes if the if statement’s condition was False. Think of it as the program’s way of saying, “If this condition is true then execute the if-block or else execute the else-block.”

Remember to put the colon (the : sign) after the else keyword.

Line 35 is the first line that isn’t a def statement or inside a def-block. This line is where our program really begins. The previous def statements merely defined the functions. It didn’t run the code inside of the functions.

Line 35 and 36 are setting up a loop that the rest of the game code fits in. At the end of the game, the player can enter if they want to play again. If they do, this while loop will run the entire game all over again. If they don’t, the while statement’s condition will be False, and the execution will move on to the end of the program and terminate.

The first time the execution comes to this while statement, line 35 will have just assigned 'yes' to the playAgain variable. That means the condition will be True.

Line 38 calls the displayIntro() function. This isn’t a Python function, it is your function that you defined earlier on line 4. When this function is called, the program execution jumps to the first line in the displayIntro() function on line 5. When all the lines in the function are done, the execution jumps back to line 38 and continues moving down.

Line 40 also calls a function that you defined. Remember that the chooseCave() function lets the player type in the cave they choose to go into. When the line 17’s return cave executes, the program execution jumps back to line 40, and the chooseCave() call evaluates to the return value. This return value is stored in a new variable named caveNumber. Then the program execution moves on to line 42.

This line calls your checkCave() function, passing the value in caveNumber as an argument. Not only does execution jump to line 20, but the value in caveNumber is copied to the parameter chosenCave inside the checkCave() function. This is the function that will display either 'Gives you his treasure!' or 'Gobbles you down in one bite!' depending on the cave the player chose to go in.

Whether the player won or lost, the player is asked if they would like to play again. The variable playAgain stores the string that the user typed in. Line 45 is the last line of the while-block, so the program jumps back to line 36 to check the condition: playAgain == 'yes' or playAgain == 'y'

If the player typed in the string 'yes' or 'y', then we would enter the loop again at line 38.

If the player typed in 'no' or 'n' or something silly like 'Abraham Lincoln', then the condition would be False. The program execution continues on to the line after the while-block. But since there are no more lines after the while-block, the program terminates.

One thing to note: the string 'YES' is different from the string 'yes'. If the player typed in the string 'YES', then the while statement’s condition would evaluate to False and the program would still terminate. Later programs in this book will show you how to fix this.

You've just completed your second game! In Dragon Realm, you used a lot of what you learned in the “Guess the Number” game and picked up a few new tricks. If you didn't understand some of the concepts in this program, then read the summary at the end of this chapter. Or go over each line of the source code again, and try changing the source code and see how the program changes.

In the next chapter you won't create a game, but instead learn how to use a feature of IDLE called the debugger.

Dragon Realm is a simple game. The other games in this book will be a bit more complicated. It sometimes helps to write down everything you want your game or program to do before you start writing code. This is called “designing the program.”

For example, it may help to draw a flow chart. A flow chart is a picture that shows every possible action that can happen in the game, and which actions lead to which other actions. Figure 6-2 is a flow chart for Dragon Realm.

To see what happens in the game, put your finger on the “Start” box and follow one arrow from the box to another box. Your finger is like the program execution. When your finger lands on the “End” box, the program has terminated. As you can see, when you get to the “Check for friendly or hungry dragon” box, the program will either go to the “Player wins” box or the “Player loses” box. Either way, both paths will end up at the “Ask to play again” box. From there the program will either end or show the introduction to the player again.

Sn the “Dragon Realm” game, you created our own functions. You can think of functions as mini-programs within your program. The code inside the function runs when the function is called. By breaking up our code into functions, you can organize our code into smaller and easier to understand sections.

Arguments are values passed to the function’s code when the function is called. The function call itself evaluates to a value called the return value.

You also learned about variable scopes. Variables created inside of a function exist in the local scope, and variables created outside of all functions exist in the global scope. Code in the global scope cannot make use of local variables. If a local variable has the same name as a variable in the global scope, Python considers it a separate variable and assigning new values to the local variable won’t change the value in the global variable.

Variable scopes might seem complicated, but they are useful for organizing functions as separate pieces of code from the rest of the program. Because each function has its own local scope, you can be sure that the code in one function won’t cause bugs in other functions.

All nontrivial programs use functions because they are so useful, including the rest of the games in this book. By understanding how functions work, you can save ourselves a lot of typing and make bugs easier to fix.

