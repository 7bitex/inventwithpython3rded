    第三章

    编写程序

本章中包含的内容：

•   执行流
•   字符串
•   连接字符串
•   数据类型（例如字符串和整数
•   使用IDLE编写源代码
•   在IDLE中保存和运行程序
•   print()函数
•   input()函数
•   注释
•   Capitalizing variables
•   大小写敏感

数学运算就做这么多了，Python可不只是一个计算器。现在我们来看看Python能对文字做点什么。在本章中，你会学习如何在变量中存储文字，把文字连接起来，并且在屏幕上显示。几乎所有的程序都要对用户显示文字，并且让用户用键盘输入文字。你还会编写你的第一个程序，在屏幕上显示“Hello World!”并且询问你的名字。

字符串

在Python中，文字值叫做字符串。字符串值可以像整数值和浮点值一样使用，你可以在变量中存储字符串。在代码中，字符串值以单引号（'）开始和结束，试着在交互式终端里输入以下代码：

>>> spam = 'hello'

单引号让Python知道字符串在哪里开始、在哪里结束，它们并不是字符串值的一部分。现在，如果你在交互式终端里输入spam，你会看到变量spam中的内容（字符串'hello'）。记住，Python将变量计算为变量中存储的值，在这个例子中，计算结果就是字符串'hello'：

>>> spam = 'hello'
>>> spam
'hello'

字符串中可以包含任何键盘上的字符。下面是一些字符串的例子：

'hello'
'Hi there!'
'KITTENS'
'7 apples, 14 oranges, 3 lemons'
'Anything not pertaining to elephants is irrelephant.'
'A long time ago in a galaxy far, far away...'
'O*&#wY%*&OCfsdYO*&gfC%YO*&%3yc8r2'

像整数和浮点数一样，字符串值也可以用运算符连接起来构成表达式。

连接字符串

试着用加号运算符+连接两个字符串。这就叫做连接字符串。试着在交互式终端里输入'Hello' + 'World!'：

>>> 'Hello' + 'World!'
'HelloWorld!'

这个表达式计算的值是一个单独的字符串值'HelloWorld!'。要想让这两个词分隔开，在字符串'Hello'的末尾、单引号之前加上一个空格，就像这样：

>>> 'Hello ' + 'World!'
'Hello World!'

对于字符串和整数值，因为它们是不同的数据类型，运算符+的工作方式是不同的。所有的值都有一个数据类型，值'Hello'的数据类型是字符串，而值5的数据类型是整数。数据类型可以让Python知道在对表达式求值时，运算符应该做什么。运算符+会把两个字符串值连接起来，然而对整数（或浮点数）则会把它们相加。

在IDLE文件编辑器中编写程序

直到现在，你一直实在IDLE交互式终端中一次一条地输入指令。然而当你编写程序时，你需要输入若干条指令，然后让它们一次性全部执行。让我们来编写你的第一个程序！

IDLE有另外一个组成部分，叫做文件编辑器。在Python终端窗口中，点击顶部的文件菜单，然后选择新建窗口，一个空白的窗口就会出现在你眼前，供你输入你的程序代码。



图3-1：文件编辑器窗口。

两个窗口看起来很像，但要记住：交互式终端里有>>>提示符，而文件编辑器里没有。

Hello World!

对于程序员来说，编写第一个程序的传统做法是在屏幕上显示“Hello world!”。现在你要编写你的Hello World程序。

在输入程序的时候，不要输入代码左边的数字，它们只是一些行号用于在本书中指明具体某一行代码。文件编辑器窗口右下角会告诉你当前光标所在的位置。图3-2展示了窗口右下角的文本是如何指示光标位置的。



图3-2：文件编辑器窗口的右下角告诉你光标在哪一行。

hello.py

在新打开的文件编辑器窗口中输入以下文本，这些文本是这个程序的源代码。它包含在程序运行时Python会依次执行的指令。（记住，不要输入行号！）

重要！本书中的程序只能在Python 3中运行，在Python 2中无法运行。当IDLE窗口启动时，在顶部会显示类似“Python 3.4.0”的文字。如果你安装了Python 2，你也可以同时安装Python 3。要下载Python 3，请访问https://python.org/download/。

1. # 这个程序向我问好并询问我的名字。
2. print('Hello world!')
3. print('你叫什么名字？')
4. myName = input()
5. print('很高兴见到你，' + myName)

IDLE会将不同类型的指令显示成不同的颜色，在你输入完这些代码之后，窗口看起来会像是这样：



图3-3：在你输入完代码之后，文件编辑器窗口看起来像是这样。

保存程序

在你输入了源代码之后，点击文件编辑器窗口左上角的文件菜单，再点击另存为来保存你的代码。图3-4显示了弹出的另存为窗口，在文件名框中输入hello.py然后点击保存。或者也可以按快捷键Ctrl-S来保存。



图3-4：保存程序。

你应该在输入程序的同时保存它。这样的话，如果电脑崩溃或者你不小心退出了IDLE，你也不会丢失掉太多的工作。

打开你已经保存的程序

要打开一个保存的程序，点击文件►打开。在弹出的窗口中选择hello.py然后点击打开按钮，你保存的hello.py程序就会在文件编辑器窗口中打开。

现在该运行程序了。点击文件►运行►运行模块或者直接在文件编辑器窗口中按下F5，你的程序就会在交互式终端窗口中运行。

当程序询问你的名字时，输入你的名字。看起来就像图3-5一样：



图3-5：运行hello.py后的图3-5。

当你输入名字并按下回车，程序会用你的名字向你问好。恭喜！你已经写完了你的第一个程序，现在你已经是一个程序员了。再一次按下F5输入另一个名字试一试。

如果你收到了错误，用http://invpy.com/diff/hello中的在线纠错工具将你的代码与本书中的代码比较。

如果你看到了这样的错误：

Hello world!
What is your name?
Albert
Traceback (most recent call last):
  File "C:/Python26/test1.py", line 4, in <module>
    myName = input()
  File "<string>", line 1, in <module>
NameError: name 'Albert' is not defined

……这意味着你在用Python 2而不是Python 3。从http://python.org安装Python 3的一个版本，然后用Python 3重新运行这个程序。

“Hello World”程序是怎么运行的

每一行代码都是由Python翻译的一条指令，这些指令组成了一个程序。计算机程序中的指令就像做蛋糕的食谱，每一条指令按顺序执行，从程序的开头开始，从上到下地执行每一条指令。

Python在程序食谱中采用的步骤叫做执行流，或者简称执行。当程序运行时，执行位于第一行，然后转到下一行。

让我们来看看每一行代码在做什么。我们从第一行开始。

注释

1. # 这个程序向我问好并询问我的名字。

这一行是一条注释。用#号（称作井号）开始的任何文本都是注释。注释不是给Python看的，而是给你，给程序员看的。Python会忽略注释。注释是为了让你或者让其他正在检查源代码的程序员了解代码要做什么的注解。为了让源代码更容易阅读，本书将注释印刷为浅灰色的文字。

程序员通常在程序的顶端添加一条注释，来为程序起一个名字。IDLE将注释显示为红色，让它们更加醒目。

函数

函数像是程序中的一个迷你程序，它包含一些指令，当这个函数被调用时就会执行指令。Python提供了一些内置的指令，接下来我们介绍两个函数，print()和input()。关于函数有一点特别重要，你只需要知道函数有什么用，而不需要知道它是怎么做到的。

函数调用是一条让Python运行函数内部的代码的代码。例如，你的程序调用了print()函数来在屏幕上显示一个字符串。print()函数将你写在括号之间的字符串作为输入，然后显示在屏幕上。要在屏幕上显示“Hello world!”，输入print函数的名字，跟上一个左括号，然后是字符串'Hello world!'和右括号。

print()函数

2. print('Hello world!')
3. print('你叫什么名字？')

第2和第3行是对print()函数的调用。函数调用的括号之间的值叫做参数，第2行print()函数调用的参数是'Hello world!'，而第3行print()函数调用的参数是'你叫什么名字？'。这叫做将参数传递给print()函数。

本书中函数的名字之后都有一对括号，从而表明是函数print()而不是变量print。这就像'42'周围的引号告诉Python这是字符串'42'而不是整数42。

input()函数

4. myName = input()

这一行是一条赋值语句，由一个变量（myName）和一个函数调用（input()）组成。当调用input()时，程序等待用户输入文本。用户输入的文本字符串变成了这条函数调用计算得到的值。函数调用可以在表达式中任何可以使用值的地方使用。

函数调用计算的值叫做返回值。（事实上，“函数调用返回的值”和“函数调用计算得到的值”意思相同。）这样，input()函数的返回值就是用户输入的字符串，也就是用户的名字。如果用户输入“Albert”，input()函数调用计算的值就是字符串'Albert'。这个计算过程就像这样：

myName = input()
            ▼
myName = 'Albert'

这就是字符串值'Albert'是怎么保存到变量myName中的。

在函数调用中使用表达式

5. print('很高兴见到你，' + myName)

最后一行是另一个print()函数调用，表达式'很高兴见到你' + myName传递给了print()。然而，参数永远是单独的值，Python会先计算这条表达式，然后将值作为参数传递给函数。如果myName中保存的是'Albert'，计算过程就会像这样：

print('很高兴见到你，' + myName)
                         ▼
print('很高兴见到你，' + 'Albert')
                         ▼
print('很高兴见到你，Albert')

这就是程序是如何用名字问候用户的。

结束程序

一旦程序运行到最后一行，程序终止或者退出，这意味着程序停止运行了。Python会忘记所有的变量，包括存储在myName中的字符串。如果你再次运行程序，并输入一个不同的名字，程序会把那个不同的字符串当成你的名字。

Hello world!
你叫什么名字？
Carolyn
很高兴见到你，Carolyn

记住，计算机会严格按照你编写的程序来执行。计算机是傻瓜，它不会在乎你输入的是你自己的名字、别人的名字还是其他的什么玩意。输入你想输入的任何东西，计算机也会一如既往地处理它：

Hello world!
你叫什么名字？
poop
很高兴见到你，poop

变量名

为变量起描述性的名字可以让程序的功能更容易理解。想象如果你搬到了一个新房子，你把所有的箱子都贴上“物品”标签，这一点用处都没有！

除了myName之外，你还可以把这个变量命名成abrahamLincoln或者nAmE。Python不在乎这些，它会照常执行这个程序。

变量名是大小写敏感的。大小写敏感的意思是大小写不同的同一个变量名，也会是不同的变量。因此spam、SPAM、Spam和sPAM在Python中是四个不同的变量，它们都包含各自独立的值。

在程序中使用仅仅大小写不同的变量不是个好主意。如果你把名字保存在变量name里，又把姓氏保存在变量NAME里，当你在写完几周之后再次阅读你的代码，你会感到很困惑，name是名NAME是姓，还是说反过来？

变量名通常是小写的。如果变量名中有多余一个单词，在第一个单词之后的所有单词首字母都要大写，这让你的代码更加可读。例如，变量whatIHadForBreakfastThisMorning比whatihadforbreakfastthismorning要可读得多。这是Python中的一个惯例——一个可选但是标准的做法。

本书的交互式终端例子使用了类似spam、eggs、ham和bacon这样的变量名，这是因为在这些例子中变量名并不重要。但是，本书的程序都使用了描述性的名字，你的程序也应该使用描述性的变量名。

总结

一旦你学会了字符串和函数，你就可以编写与用户交互的程序了。这很重要，因为文本是用户和计算机交流的主要方式。用户通过input()用键盘输入文本，然后计算机用print()函数将文本显示在屏幕上。

字符串只是一种新的数据类型。所有的值都有数据类型，而且Python中有很多数据类型。运算符+可以将字符串拼接起来。

变量让你保存值并在之后的程序中使用。函数可以将一些复杂的指令作为你程序的一部分来执行。Python有很多内置的函数，你在本书中都会学到。变量和函数调用可以在表达式中任何可以使用值的地方使用。

在你的程序中，Python当前正在执行的指令叫做执行。在下一章中，你会学习除了从上到下依次执行之外，更多有关执行移动的方法。一旦你学会了这个，你就可以创造游戏了。

