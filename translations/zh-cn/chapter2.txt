  第二章

  交互式终端

本章中包含的内容：

• 整数和浮点数
• 表达式
• 值
• 运算符
• 表达式求值
• 用变量存储值
• 覆盖变量

在你可以编写游戏之前，你需要学习一些基本的编程概念。在这一章里你不会编写游戏，而是先要学习编写游戏所需的这些概念。

一些简单的数学运算

按照第一章中的方法运行IDLE，然后让Python计算一些数学题。交互式终端可以拿来当计算器用。在交互式终端中输入2 + 2然后按下键盘上的回车键（ENTER键，有些键盘上是RETURN键）。图2-1中，IDLE回答了结果是数字4。



图2-1：在交互式终端中输入2 + 2。

这道数学问题也是一条简单的编程指令，加号+告诉计算机把数字2和2相加。表2-1列出了Python中其他可用的数学符号，其中-用来将数字相减，*则是让数字相乘，而/则是让数字做除法运算。

表2-1：Python中的各种数学运算符。
运算符		操作
+			加法
-			减法
*			乘法
/			除法



在这种情况下，+、-、*、和/四个符号就叫做运算符。运算符告诉Python对两侧的数字采用哪种数学运算。

整数和浮点数

在编程中，整数是像4、99和0这种数字，而浮点数是像3.5、42.1和5.0等等这样的分数或者小数。在Python中，数字5是整数，而5.0则是浮点数。

表达式

以上的数学问题就是表达式，计算机可以在几秒的时间里计算上百万条这样的式子。表达式是由运算符（数学符号）连接值（数字）组成的，让我们来了解一下值和运算符到底是什么。试着在交互式终端里输入以下的一些数学式，每输入一个就按下回车键。

2+2+2+2+2
8*6
10-5+6
2  +       2

输入完这些指令后，交互式终端看起来会像图2-2一样。



图2-2：输入完指令之后的IDLE窗口。



图2-3：一条表达式由值和运算符组成。

若干个值（例如8、6等整数）由运算符（例如乘号*）连接起来，就组成了一条表达式。单独一个值本身也是一个表达式。在上面的例子2  +       2中，注意值和运算符之间可以有任意数量的空格，但是在交互式终端里输入指令时，不要在指令的开头添加空格。

在下一章中，你会学习如何在表达式里使用文字。Python并不是只能操作数字，它可不只是一个计算器！

表达式求值

当计算机计算表达式10 + 5并且算出结果15时，它就在对这条表达式求值。对表达式求值会将其计算为一个单独的值，就像计算一道数学题求出答案一样。

表达式10 + 5和10 + 3 + 2具有相同的值，都是15。

表达式可以任意长，但它们都会被求值成一个单独的值，而这个单独的值也是表达式：表达式15求值的结果是值15。例如，表达式8 * 3 / 2 + 2 + 7 - 9会按以下步骤求值为值12.0：

8 * 3 / 2 + 2 + 7 – 9
                  ▼
   24 / 2 + 2 + 7 – 9
                  ▼
     12.0 + 2 + 7 – 9
                  ▼
         14.0 + 7 – 9
                  ▼
             21.0 – 9
                  ▼
                 12.0

你在交互式终端里看不到这些步骤，交互式终端只会完成计算然后告诉你结果：

>>> 8 * 3 / 2 + 2 + 7 - 9
12.0

注意，除法运算符/求值的结果会是一个浮点数，例如24 / 2的求值结果是12.0。此外，应用在浮点数上的数学运算符也会被求值成浮点数，例如12.0 + 2的求值结果是14.0。

语法错误

如果你在交互式终端里输入5 +，你会看到一条错误信息。

>>> 5 +
SyntaxError: invalid syntax

出现这个错误的原因是5 +并不是一条表达式。表达式是由运算符连接起来的值，运算符+之后理应出现一个值，但是缺少了这个值，就出现了错误信息。

SyntaxError（语法错误）表示你输入的指令有误，Python无法理解这条指令。编程并不只是告诉计算机要做什么，还要知道怎么样告诉计算机。

但是，不要害怕出错。出错并不会损坏你的电脑，只要在下一个>>>提示符之后重新输入正确的指令就可以了。

用变量存储值

为了能在之后的程序中使用一个表达式的值，你会希望把它保存起来。你可以用变量来存储值，变量就像一个可以装值的盒子。

使用赋值语句可以把值（或者表达式的求值）保存到变量中。为变量起一个名字，之后跟上=号（称为赋值运算符），然后是要在变量中存储的值。例如，在交互式终端中输入spam = 15：

>>> spam = 15
>>>



图2-4：变量就像是可以装值的盒子。

就像图2-4那样，15这个值会被存放到spam变量的盒子里。“spam”这个名字就像是贴在盒子上的标签（Python用它来区分不同的变量），而值会写在盒子里的一张便条上。

当你按下回车键时你不会看到任何回应。在Python中，如果没有出现错误信息，就可以认为指令成功执行了。下方出现的>>>提示符提醒你继续输入之后的指令。

和表达式不同，语句是不能计算出值的指令，因此在交互式终端里输入之后下一行不会出现任何值。究竟哪些指令是表达式、哪些指令是语句，可能很难判断，现在只需要知道表达式可以计算出一个值，其他的指令都是语句。

变量中存放的是值而不是表达式。例如，spam = 10 + 5和spam = 10 + 7 - 2这两条语句中的表达式不相同，但求值的结果都是15。它们的结果是一样的：两条语句都会在变量spam中存放值15。

如果第一次在赋值语句中使用变量，Python就会创建这个变量。要判断变量中存放的值是多少，只需要在交互式终端中输入变量的名字：

>>> spam = 15
>>> spam
15

表达式spam的求值结果是存放在变量spam中的值：15。你可以在表达式中使用变量，试着在交互式终端中输入以下代码：

>>> spam = 15
>>> spam + 5
20

你已经将变量spam的值设为15，因此spam + 5就相当于表达式15 + 5。

在使用赋值语句创建一个变量之前，你不能够使用这个变量。因为这个变量还不存在，Python会提示一个错误。拼错变量名也会导致这个错误：

>>> spam = 15
>>> spma

Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    spma
NameError: name 'spma' is not defined

出现错误的原因是变量名是spam而不是spma。

你可以用另一条赋值语句改变变量中存储的值。例如，输入以下代码：

>>> spam = 15
>>> spam + 5
20
>>> spam = 3
>>> spam + 5
8

当你第一次输入spam + 5时，因为spam中的值是15，表达式的值是20。然而，当你输入spam = 3时，spam中的值15被替换或者说被覆盖了，变成了3。现在你输入spam + 5，因为spam的值变成3了，表达式的值就是8。

你还可以用变量spam中的值为spam自身赋值：

>>> spam = 15
>>> spam = spam + 5
20

赋值语句spam = spam + 5就像在说：“变量spam新的值是它现在的值加上5。”再将spam的值增大几次，每次加5：

>>> spam = 15
>>> spam = spam + 5
>>> spam = spam + 5
>>> spam = spam + 5
>>> spam
30

使用更多的变量

在程序中，你可以根据需要创建任意数量的变量。例如，我们来为两个分别叫eggs和fizz的变量赋不同的值：

>>> fizz = 10
>>> eggs = 15

现在变量fizz中的值是10，而eggs的值是15。



图2-5：变量“fizz”和“eggs”都存放了值。

试着在交互式终端中输入spam = fizz + eggs，然后检查spam现在的值：

>>> fizz = 10
>>> eggs = 15
>>> spam = fizz + eggs
>>> spam
25

spam现在的值是25。当你将fizz和eggs相加时，你相加的是它们各自的值，也就是10和15。

总结

在这一章中，你学习了编写Python指令的基础知识。Python需要你用严格的方式告诉它需要做什么。计算机并不具有常识，只能理解特定的指令。

表达式是由运算符（例如+和-）连接的值（例如2和5）组成的。Python可以为表达式求值（将表达式计算为一个单独的值）。你可以用变量存储值，程序就可以记住这些值，并在之后使用。

Python中还有很多种运算符和值，在下一章中，你会了解更多的基础知识，并开始编写你的第一个程序！
