    Capítulo 5
    CHISTES

Temas Tratados En Este Capítulo:

•   Utilizando el argumento palabra clave final (end) de print() para evitar nuevas lineas
•   Caracteres de escape
•   Utilizando comillas simples y comillas dobles para las cadenas.

Aprovechar print() al Máximo

La mayoría de los juegos en este libro tendrán un texto simple de entrada y salida. La entrada es escrita por el usuario desde el teclado e introducida a la computadora. La salida es el texto mostrado en la pantalla. En Python, la función print() se puede usar para mostrar salidas de texto en la pantalla. Pero hay mas para aprender sobre cómo funcionan las cadenas y el print() en Python.

El programa de este capítulo le cuenta distintos chistes al usuario.

Ejecución de Muestra de Chistes

¿Qué sale de la cruza entre un mono y un pato?
¡Un monopatín!
¿Qué le dijo un pez a otro pez?
¡Nada!
¿En qué se parecen una familia, un bombero y un barco?
No sé... ¿en qué se parecen?
'En que el bombero y el barco tienen casco.'
¿Y la familia? -Bien, gracias.


El Código Fuente de Chistes

Escriba el siguiente código fuente en el editor de archivos y guárdelo como chistes.py

¡NOTA IMPORTANTE! Los programas en este libro solo correrán en Python 3, no en Python 2. Cuando la ventana de IDLE inicie, dirá algo como “Python 3.4.0” en la parte superior. Si ha instalado Python 2, puede tener Python 3 instalado al mismo tiempo. Para descargar Python 3, vaya a https://python.org/download/.

Si obtiene errores después de escribir este código, compárelo con el código del libro con la herramienta diff en línea en http://invpy.com/diff/chistes.

chistes.py

 1. print('¿Qué sale de la cruza entre un mono y un pato?')
 2. input()
 3. print('¡Un monopatín!')
 4. print()
 5. print('¿Qué le dijo un pez a otro pez?')
 6. input()
 7. print('¡Nada!')
 8. print()
 9. print('¿En qué se parecen una familia, un bombero y un barco?')
10. input()
11. print("No sé... ¿en qué se parecen?")
12. input()
13. print('En que el bombero y el barco tienen casco.')
14. input()
15. print('¿Y la familia?', end='')
16. print(' -Bien, gracias.')

No te preocupes si no entiendes todo el código. Sólo tienes que guardar y correr el programa. Recuerda, si tu programa tiene fallos, puedes utilizar la herramienta diff en línea en http://invpy.com/chap5.

Cómo Funciona el Código

 1. print('¿Qué sale de la cruza entre un mono y un pato?')
 2. input()
 3. print('¡Un monopatín!')
 4. print()

Las líneas de la 1 a la 4 tienen tres llamadas a la función print(). No quieres que el jugador lea de inmediato el remate del chiste, así que hay una llamada a la función print() después del primer print(). El jugador puede leer la primera línea, presionar Intro, y entonces leer el remate del chiste.

El usuario todavía puede escribir una cadena y pulsar Intro, pero esta cadena devuelta no está siendo almacenada en ninguna variable. El programa tan solo lo olvidará y se moverá a la siguiente línea de código.

La última llamada a la función print() no tiene argumento de cadena. Esto le indica al programa que solamente escriba una línea en blanco. Las líneas en blanco pueden ser útiles para evitar que el texto quede unido.

Escape Characters

 5. print('What do dentists call a astronaut's cavity?')
 6. input()
 7. print('A black hole!')
 8. print()

In the first print() above, there is a backslash right before the single quote (that is, the apostrophe). Note that \ is a backslash, and / is a forward slash. This backslash tells you that the letter right after it is an escape character. An escape character lets you print characters that are hard to enter into the source code. In this print() call the escape character is the single quote.

The single quote escape character is there because otherwise Python would think the quote meant the end of the string. But this quote needs to be a part of the string. The escaped single quote tells Python that the single quote is literally a part of the string rather than marking the end of the string value.

Some Other Escape Characters

What if you really want to display a backslash? This line of code would not work:

>>> print('He flew away in a green\teal helicopter.')

That print() function call would show up as:

He flew away in a green    eal helicopter.

This is because the “t” in “teal” was seen as an escape character since it came after a backslash. The escape character t simulates pushing the Tab key on your keyboard. Escape characters are there so that strings can have characters that cannot be typed in.

Instead, try this line:

>>> print('He flew away in a green\\teal helicopter.')
He flew away in a green\teal helicopter.

Table 5-1 is a list of escape characters in Python.

Table 5-1: Escape Characters
Escape Character        What Is Actually Printed
\\                      Backslash (\)
\'                      Single quote (')
\"                      Double quote (")
\n                      Newline
\t                      Tab



Quotes and Double Quotes

Strings don’t always have to be in between single quotes in Python. You can also put them in between double quotes. These two lines print the same thing:

>>> print('Hello world')
Hello world
>>> print("Hello world")
Hello world

But you cannot mix quotes. This line will give you an error if you try to use them:

>>> print('Hello world")
SyntaxError: EOL while scanning single-quoted string

I like to use single quotes so I don’t have to hold down the shift key to type them. It’s easier to type, and Python doesn’t care either way.

Just like you need the escape character \' to have a single quote in a string surrounded by single quotes, you need the escape character \" to have a double quote in a string surrounded by double quotes. For example, look at these two lines:

>>> print('I asked to borrow Abe\'s car for a week. He said, "Sure."')

I asked to borrow Abe's car for a week. He said, "Sure."

>>> print("He said, \"I can’t believe you let him borrow your car.\"")

He said, "I can’t believe you let him borrow your car."

In the single quote strings you don’t need to escape double quotes, and in the double quote strings you don’t need to escape single quotes. The Python interpreter is smart enough to know that if a string starts with one type of quote, the other type of quote doesn’t mean the string is ending.

The end Keyword Argument

 9. print('Knock knock.')
10. input()
11. print("Who's there?")
12. input()
13. print('Interrupting cow.')
14. input()
15. print('Interrupting cow wh', end='')
16. print('-MOO!')

Did you notice the second parameter on line 15's print()? Normally, print() adds a newline character to the end of the string it prints. This is why a blank print() function will just print a newline. But the print() function can optionally have a second parameter (which has the name “end”.)

The blank string passed is called a keyword argument. The end parameter has a specific name, and to pass an argument to this specific parameter we need to use the end= syntax.

By passing a blank string for the end, the print() function won’t add a newline at the end of the string, but instead add a blank string. This is why '-MOO!' appears next to the previous line, instead of on its own new line. There was no newline after the 'Interrupting cow wh' string.

Summary

This chapter explores the different ways you can use the print() function. Escape characters are used for characters that are difficult or impossible to type into the code with the keyboard. Escape characters are typed into strings beginning with a backslash \ followed by a single letter for the escape character. For example, \n would be a newline. To include a backslash in a string, you would use the escape character \\.

The print() function automatically appends a newline character to the end of the string we pass it to be displayed on the screen. Most of the time, this is a helpful shortcut. But sometimes you don’t want a newline character at the end. To change this, you can pass the end keyword argument with a blank string. For example, to print “spam” to the screen without a newline character, you would call print('spam', end='').

By adding this level of control to the text we display on the screen, you can be more flexible ways in how you display text on the screen

