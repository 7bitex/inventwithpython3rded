  Capítulo 2

  LA CONSOLA INTERACTIVA

Temas Tratados En Este Capítulo:

• Enteros y Números de Punto Flotante
• Expresiones
• Valores
• Operadores
• Evaluación de Expresiones
• Almacenamiento de Valores en Variables
• Sobreescritura de variables

Antes de poder crear juegos, necesitas aprender algunos conceptos básicos de programación. No crearás juegos en este capítulo, pero aprender estos conceptos es el primer paso para programar videojuegos. Comenzaremos por aprender cómo usar la consola interactiva de Python.

Operaciones Matemáticas Sencillas

Abre IDLE usando los pasos en el Capítulo 1, y haz que Python resuelva algunas operaciones matemáticas sencillas. La consola interactiva puede funcionar como una calculadora. Escribe 2 + 2 en la consola interactiva y presiona la tecla INTRO en tu teclado. (En algunos teclados, esta tecla se llama RETURN.) La Figura 2-1 muestra cómo IDLE responde con el número 4.



Figura 2-1: Escribe 2+2 en la consola interactiva.

Este pronlema matemático es una simple instrucción de programación. El signo + le dice a la computadora que sume los números 2 y 2. La Tabla 2-1 presenta los otros operadores matemáticos disponibles en Python. El signo - restará números. El asterisco * los multiplicará. La barra / los dividirá.

Tabla 2-1: Los diferentes operadores matemáticos en Python.
Operador      Operación
+             suma
-             resta
*             multiplicación
/             división



Cuando se usan de esta forma, +, -, *, y / se llama operadores. Los operadores le dicen a Python qué operación matemática realizar sobre los números que los rodean.

Enteros y Números de Punto Flotante

En programación, los enteros o ints son precisamente números enteros como 4, 99, y 0. Los números de punto flotante o floats son fracciones o números con punto decimal como 3.5, 42.1 y 5.0. En Python, el número 5 is an integer, pero 5.0 es un float.

Expresiones

Estos problemas matemáticos son ejemplos de expresiones. Las computadoras pueden resolver millones de estos problemas en segundos. Las expresiones se componen de valores (los números) conectadas por operadores (los símbolos matemáticos). Vamos a aprender exactamente qué son los valores y operadores. Prueba escribir algunos de estos problemas matemáticos en la consola interactiva, presiona la tecla INTRO después de cada uno.

2+2+2+2+2
8*6
10-5+6
2  +       2

Luego de introducir estas instrucciones, la consola interactiva se verá como la Figura 2-2.



Figura 2-2: Así se ve la ventana de IDLE luego de introducir las instrucciones.



Figura 2-3: Una expresión se compone de valores y operadores.

Una expresión se compone de valores (por ejemplo enteros como 8 y 6) conectados por un operador (tal como el signo de multiplicación * ). Un solo valor es también en sí mismo una expresión. En el ejemplo 2  +       2, se ve que puede haber cualquier cantidad de espacios entre los valores y los operadores. Sin embargo, no pongas espacios al comienzo de la instrucción al escribirla en la consola interactiva.

En el próximo capítulo, aprenderás a trabajar con texto en expresiones. Python no se limita sólo a los números; ¡es más que una calculadora!

Evaluación de Expresiones

Cuando una computadora resuelve la expresión 10 + 5y obtiene el valor 15, ha evaluado la expresión. Evaluar una expresión la reduce a un único valor, igual que resolver un problema de matemática lo reduce a un único número: la respuesta.

Las expresiones 10 + 5 y 10 + 3 + 2 tienen el mismo valor. Ambas son evaluadas a 15.

Las expresiones pueden ser de cualquier tamaño, pero siempre serán evaluadas a un valor único. Incluso valores únicos son expresiones: La expresión 15 se evalúa al valor 15. Por ejemplo, la expresión 8 * 3 / 2 + 2 + 7 - 9 se evalúa al valor 12.0 a través de los siguientes pasos:

8 * 3 / 2 + 2 + 7 – 9
                  ▼
   24 / 2 + 2 + 7 – 9
                  ▼
     12.0 + 2 + 7 – 9
                  ▼
         14.0 + 7 – 9
                  ▼
             21.0 – 9
                  ▼
                 12.0

No puedes ver todos estos pasos en la consola interactiva. La consola los realiza y sólo te muestra los resultados:

>>> 8 * 3 / 2 + 2 + 7 - 9
12.0

Observa que el operador división / se evalúa a un valor float, como ocurre cuando 24 / 2 devuelve 12.0. Además, las operaciones matemáticas con valores flotantes también devuelven valores flotantes, como cuando 12.0 + 2 devuelve 14.0.

Errores de Sintaxis

Si escribes 5 + en la consola interactiva, obtendrás un mensaje de error.

>>> 5 +
SyntaxError: invalid syntax

Este error ha ocurrido porque 5 + no es una expresión. Las expresiones conectan valores mediante operadores. Pero el operador + espera un valor después del signo +. Cuando este valor no se encuentra, aparece un mensaje de error.

SyntaxError significa que Python no entiende la instrucción porque la has escrito de forma incorrecta. Una gran parte de programar computadoras se trata no sólo de decirle a la computadora qué hacer, sino también de saber exactamente cómo decírselo.

Pero no te preocupes por cometer errores. Los errores no dañan tu computadora. Simplemente vuelve a escribir la instrucción correctamente en la consola interactiva luego del siguiente indicador >>> de consola.

Almacenamiento de Valores en Variables

A menudo desearás guardar el valor al cual al cual una expresión es evaluada, para poder usarlo más adelante en el programa. Puedes guardar valores en variables. Piensa las variables como cajas que pueden contener valores.

Una instrucción de asignación guardará un valor (o el valor al que se evalúa una expresión) dentro de una variable. Inventa un nombre para una variable, seguido por el signo = (llamado operador de asignación), y luego el valor a almacenar en la variable. Por ejemplo, ingresa spam = 15 en la consola interactiva:

>>> spam = 15
>>>



Figura 2-4: Las variables son como cajas que pueden contener variables.

La caja de la variable spam tendrá guardado el valor 15, como se muestra en la Figura 2-4. El nombre “spam” es la etiqueta en la caja (para que Python pueda distinguir las variables) y el valor está escrito en una pequeña nota dentro de la caja.

Cuando presiones INTRO no recibirás ninguna respuesta. En Python, si no aparece ningún mensaje de error puedes asumir que la instrucción se ha ejecutado correctamente. El indicador de consola >>> aparecerá para que puedas tipear la próxima instrucción.

Unlike expressions, statements are instructions that do not evaluate to any value, which is why there is no value displayed on the next line in the interactive shell. It might be confusing to know which instructions are expressions and which are statements. Just remember that expressions evaluate to a single value. Any other kind of instruction is a statement.

Variables store values, not expressions. For example, consider the expression in the statements spam = 10 + 5 and spam = 10 + 7 - 2. They both evaluate to 15. The end result is the same: Both statements store the value 15 in the variable spam.

The first time a variable is used in an assignment statement, Python will create that variable. To check what value is in a variable, type the variable name into the interactive shell:

>>> spam = 15
>>> spam
15

The expression spam evaluates to the value inside the spam variable: 15. You can use variables in expressions. Try entering the following in the interactive shell:

>>> spam = 15
>>> spam + 5
20

You’ve set the value of the variable spam to 15, so writing spam + 5 is like writing the expression 15 + 5.

You cannot use a variable before an assignment statement creates it. Python will give you an error because no such variable exists yet. Mistyping the variable name also causes this error:

>>> spam = 15
>>> spma

Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    spma
NameError: name 'spma' is not defined

The error appeared because there is spam variable but not spma.

You can change the value stored in a variable by entering another assignment statement. For example, try the following:

>>> spam = 15
>>> spam + 5
20
>>> spam = 3
>>> spam + 5
8

When you first enter spam + 5, the expression evaluates to 20 because you stored 15 inside spam. However, when you enter spam = 3, the value 15 is replaced, or overwritten, with the value 3. Now when you enter spam + 5, the expression evaluates to 8 because the value of spam is now 3.

You can even use the value in the spam variable to assign a new value to spam:

>>> spam = 15
>>> spam = spam + 5
20

The assignment statement spam = spam + 5 is like saying, “the new value of the spam variable will be the current value of spam plus five.” Keep increasing the value in spam by 5 several times:

>>> spam = 15
>>> spam = spam + 5
>>> spam = spam + 5
>>> spam = spam + 5
>>> spam
30

Using More Than One Variable

Create as many variables as you need in your programs. For example, let’s assign different values to two variables named eggs and fizz, like so:

>>> fizz = 10
>>> eggs = 15

Now the fizz variable has 10 inside it, and eggs has 15 inside it.



Figure 2-5: The “fizz” and “eggs” variables have values stored in them.

Try entering spam = fizz + eggs into the interactive shell, then check the new value of spam:

>>> fizz = 10
>>> eggs = 15
>>> spam = fizz + eggs
>>> spam
25

The value in spam is now 25. When you added fizz and eggs you are adding their values, which are 10 and 15, respectively.

Summary

In this chapter, you learned the basics about writing Python instructions. Python needs you to tell it exactly what to do in a strict way. Computers don’t have common sense and only understand specific instructions.

Expressions are values (such as 2 or 5) combined with operators (such as + or -). Python can evaluate expressions (that is, reduce the expression to a single value). You can store values inside of variables so that your program can remember them and use them later.

There are many other types of operators and values in Python. In the next chapter, you’ll go over some more basic concepts and write your first program!

