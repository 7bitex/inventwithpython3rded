  Capítulo 19
  SONIDOS E IMÁGENES

Temas Tratados en Este Capítulo:

• Archivos de Sonido e Imagen
• Dibujando Sprites
• La Función pygame.image.load()
• El Tipo de Datos pygame.mixer.Sound
• El Módulo pygame.mixer.music

En los últimos dos capítulos, hemos aprendido cómo hacer programas GUI que muestran gráficos y pueden aceptar entradas del teclado y del ratón. También hemos aprendido cómo dibujar diferentes formas. En este capítulo aprenderemos cómo mostrar fotos e imágenes (llamadas sprites) y reproducir sonidos y música en nuestros juegos.

Sprite el nombre dado a una imagen individual bidimensional que se usa como parte de los gráficos en la pantalla. La Figura 19-1 muestra algunos ejemplos de sprites.

Figura 19-1: Algunos ejemplos de sprites.

La Figura 19-2 muestra sprites utilizados en una escena completa.

Figura 19-2: Un ejemplo de una escena completa, con sprites dibujados sobre una imagen de fondo.

Los sprites se dibujan sobre una imagen de fondo. Nota que puedes invertir el sprite horizontalmente o verticalmente de modo que las imágenes se den vuelta. Puedes dibujar el mismo sprite múltiples veces en la misma ventana. También puedes redimensionar los sprites para que sean más grandes o más pequeños que la imagen original. Podemos considerar a la imagen de fondo como un gran sprite.

El siguiente programa demostrará cómo reproducir sonidos y dibujar sprites usando Pygame.

Archivos de Sonido e Imagen

Los sprites son almacenados en archivos de imagen en tu computadora. Pygame puede usar varios formatos diferentes de imagen. Puedes darte cuenta cuál es el formato de un archivo mirando al final del nombre de archivo (después del último punto). Esto se denomina la extensión del archivo. Por ejemplo, el archivo jugador.png tiene formato PNG. Los formatos de imagen soportados por Pygame incluyen BMP, PNG, JPG, y GIF.

Puedes descargar imágenes de tu navegador. En la mayoría de los navegadores, tienes que hacer clic con el botón derecho sobre una imagen en una página web y seleccionar Guardar del menú que aparece. Recuerda en qué lugar de tu disco guardas el archivo de imagen. Copia el archivo de la imagen descargada a la misma carpeta que el archivo .py de tu programa de Python. También puedes crear tus propias imágenes con un programa de dibujo como MS Paint o Tux Paint.

Los formatos de archivos de sonido que Pygame soporta son MID, WAV y MP3. Puedes descargar efectos de sonido de Internet igual que los archivos de imagen. Deben estar en uno de estos tres formatos. Si tu computadora tiene un micrófono, también puedes grabar sonidos y crear tus propios archivos WAV para usar en tus juegos.

Programa Sprites y Sonidos

Este programa es igual que el programa de entradas del teclado y del ratón del capítulo anterior. Sin embargo, en este programa usaremos sprites en lugar de cuadrados sin dibujos. Usaremos un sprite de una personita en lugar del cuadrado blanco del jugador, y un sprite de cerezas reemplazando a los cuadrados verdes de comida. También reproduciremos música de fondo y un efecto de sonido cuando el sprite del jugador se coma una de las cerezas.

Código Fuente del Programa Sprites y Sonidos

Si sabes cómo usar software de gráficos como Photoshop o MS Paint, puedes dibujar tus propias imágenes. Si no sabes usar estos programas, puedes descargar gráficos de sitios web y usar esos archivos de imagen. Lo mismo vale para archivos de música y sonido. También puedes usar imágenes de sitios web o de una cámara digital. Puedes descargar los archivos de imagen y sonido del sitio web de este libro en http://invpy.com/downloads.

Si obtienes errores luego de escribir este código, compara lo que has escrito con el código del libro usando la herramienta diff online en http://invpy.com/diff/spritesAndSounds.

spritesYsonidos.py

  1. import pygame, sys, time, random
  2. from pygame.locals import *
  3. 
  4. # configurar pygame
  5. pygame.init()
  6. mainClock = pygame.time.Clock()
  7. 
  8. # configurar la ventana
  9. ANCHOVENTANA = 400
 10. ALTOVENTANA = 400
 11. superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTOVENTANA), 0, 32)
 12. pygame.display.set_caption('Sprites y Sonido')
 13. 
 14. # configurar los colores
 15. NEGRO = (0, 0, 0)
 16. 
 17. # configurar la estructura de bloque de datos
 18. jugador = pygame.Rect(300, 100, 40, 40)
 19. imagenJugador = pygame.image.load('jugador.png')
 20. imagenEstiradaJugador = pygame.transform.scale(imagenJugador, (40, 40))
 21. imagenComida = pygame.image.load('cereza.png')
 22. comidas = []
 23. for i in range(20):
 24.     comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - 20), random.randint(0, ALTOVENTANA - 20), 20, 20))
 25. 
 26. contadorComida = 0
 27. NUEVACOMIDA = 40
 28. 
 29. # configurar variables del teclado
 30. moverseIzquierda = False
 31. moverseDerecha = False
 32. moverseArriba = False
 33. moverseAbajo = False
 34. 
 35. VELOCIDADMOVIMIENTO = 6
 36. 
 37. # configurar música
 38. sonidoRecolección = pygame.mixer.Sound('recolección.wav')
 39. pygame.mixer.music.load('músicaDeFondo.mid')
 40. pygame.mixer.music.play(-1, 0.0)
 41. músicaSonando = True
 42. 
 43. # ejecutar el bucle del juego
 44. while True:
 45.     # comprobar si se ha disparado el evento QUIT (salir)
 46.     for evento in pygame.event.get():
 47.         if evento.type == QUIT:
 48.             pygame.quit()
 49.             sys.exit()
 50.         if evento.type == KEYDOWN:
 51.             # cambiar las variables del teclado
 52.             if evento.key == K_LEFT or evento.key == ord('a'):
 53.                 moverseDerecha = False
 54.                 moverseIzquierda = True
 55.             if evento.key == K_RIGHT or evento.key == ord('d'):
 56.                 moverseIzquierda = False
 57.                 moverseDerecha = True
 58.             if evento.key == K_UP or evento.key == ord('w'):
 59.                 moverseAbajo = False
 60.                 moverseArriba = True
 61.             if evento.key == K_DOWN or evento.key == ord('s'):
 62.                 moverseArriba = False
 63.                 moverseAbajo = True
 64.         if evento.type == KEYUP:
 65.             if evento.key == K_ESCAPE:
 66.                 pygame.quit()
 67.                 sys.exit()
 68.             if evento.key == K_LEFT or evento.key == ord('a'):
 69.                 moverseIzquierda = False
 70.             if evento.key == K_RIGHT or evento.key == ord('d'):
 71.                 moverseDerecha = False
 72.             if evento.key == K_UP or evento.key == ord('w'):
 73.                 moverseArriba = False
 74.             if evento.key == K_DOWN or evento.key == ord('s'):
 75.                 moverseAbajo = False
 76.             if evento.key == ord('x'):
 77.                 jugador.top = random.randint(0, ALTOVENTANA - jugador.height)
 78.                 jugador.left = random.randint(0, ANCHOVENTANA - jugador.width)
 79.             if evento.key == ord('m'):
 80.                 if músicaSonando:
 81.                     pygame.mixer.music.stop()
 82.                 else:
 83.                     pygame.mixer.music.play(-1, 0.0)
 84.                 músicaSonando = not músicaSonando
 85. 
 86.         if evento.type == MOUSEBUTTONUP:
 87.             comidas.append(pygame.Rect(evento.pos[0] - 10, evento.pos[1] - 10, 20, 20))
 88. 
 89.     contadorComida += 1
 90.     if contadorComida >= NUEVACOMIDA:
 91.         # agregar nueva comida
 92.         contadorComida = 0
 93.         comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - 20), random.randint(0, ALTOVENTANA - 20), 20, 20))
 94. 
 95.     # pintar el fondo negro sobre la superficie
 96.     superficieVentana.fill(NEGRO)
 97. 
 98.     # mover el jugador
 99.     if moverseAbajo and jugador.bottom < ALTOVENTANA:
100.         jugador.top += VELOCIDADMOVIMIENTO
101.     if moverseArriba and jugador.top > 0:
102.         jugador.top -= VELOCIDADMOVIMIENTO
103.     if moverseIzquierda and jugador.left > 0:
104.         jugador.left -= VELOCIDADMOVIMIENTO
105.     if moverseDerecha and jugador.right < ANCHOVENTANA:
106.         jugador.right += VELOCIDADMOVIMIENTO
107. 
108. 
109.     # dibujar el bloque sobre la superficie
110.     superficieVentana.blit(imagenEstiradaJugador, jugador)
111. 
112.     # comprobar si el jugador ha intersectado alguno de los cuadrados de comida
113.     for comida in comidas[:]:
114.         if jugador.colliderect(comida):
115.             comidas.remove(comida)
116.             jugador = pygame.Rect(jugador.left, jugador.top, jugador.width + 2, jugador.height + 2)
117.             imagenEstiradaJugador = pygame.transform.scale(imagenJugador, (jugador.width, jugador.height))
118.             if músicaSonando:
119.                 sonidoRecolección.play()
120. 
121.     # dibujar la comida
122.     for comida in comidas:
123.         superficieVentana.blit(imagenComida, comida)
124. 
125.     # dibujar la ventana sobre la pantalla
126.     pygame.display.update()
127.     mainClock.tick(40)

Figura 19-3: Una captura de pantalla modificada del juego Sprites y Sonidos.

Setting Up the Window and the Data Structure

Most of the code in this program is the same as the Collision Detection program in the previous chapter. We’ll focus only on the parts that add sprites and sound.

 12. pygame.display.set_caption('Sprites and Sound')

First, let’s set the caption of the title bar to a string that describes this program on line 12. Pass the string 'Sprites and Sound' to the pygame.display.set_caption() function.

 17. # set up the block data structure
 18. player = pygame.Rect(300, 100, 40, 40)
 19. playerImage = pygame.image.load('player.png')
 20. playerStretchedImage = pygame.transform.scale(playerImage, (40, 40))
 21. foodImage = pygame.image.load('cherry.png')

We are going to use three different variables to represent the player, unlike the previous programs that just used one.

The player variable on line 18 will store a Rect object that keeps track of where and how big the player is. The player variable doesn’t contain the player’s image, only the player’s size and location. At the beginning of the program, the top left corner of the player is located at (300, 100) and the player will have a height and width of 40 pixels to start.

The second variable on line 19 that represents the player is playerImage. The pygame.image.load() function is passed a string of the filename of the image to load. The return value is a Surface object that has the graphics in the image file drawn on its surface. We store this Surface object inside of playerImage.

The third variable is explained in the next section.

The pygame.transform.scale() Function

On line 20, we will use a new function in the pygame.transform module. The pygame.transform.scale() function can shrink or enlarge a sprite. The first argument is a pygame.Surface object with the image drawn on it. The second argument is a tuple for the new width and height of the image in the first argument. The pygame.transform.scale() function returns a pygame.Surface object with the image drawn at a new size. We will store the original image in the playerImage variable but the stretched image in the playerStretchedImage variable.

On line 21, we call pygame.image.load() again to create a Surface object with the cherry image drawn on it. Be sure you have the player.png and cherry.png files in the same directory as the spritesAndSounds.py file, otherwise Pygame won’t be able to find them and will give an error.

Setting Up the Music and Sounds

 37. # set up music
 38. pickUpSound = pygame.mixer.Sound('pickup.wav')
 39. pygame.mixer.music.load('background.mid')
 40. pygame.mixer.music.play(-1, 0.0)
 41. musicPlaying = True

Next you need to load the sound files. There are two modules for sound in Pygame. The pygame.mixer module can play short sound effects during the game. The pygame.mixer.music module can play background music.

Call the pygame.mixer.Sound() constructor function to create a pygame.mixer.Sound object (called a Sound object for short). This object has a play() method that when called will play the sound effect when called.

Line 39 calls pygame.mixer.music.load() to load the background music. Line 40 calls pygame.mixer.music.play() to start playing the background music. The first parameter tells Pygame how many times to play the background music after the first time we play it. So passing 5 will cause Pygame to play the background music 6 times. -1 is a special value, and passing it for the first parameter makes the background music repeat forever.

The second parameter to pygame.mixer.music.play() is the point in the sound file to start playing. Passing 0.0 will play the background music starting from the beginning. Passing 2.5 for the second parameter will start the background music two and half seconds from the beginning.

Finally, the musicPlaying variable will have a Boolean value that tells the program if it should play the background music and sound effects or not. It’s nice to give the player the option to run the program without the sound playing.

Toggling the Sound On and Off

 79.             if event.key == ord('m'):
 80.                 if musicPlaying:
 81.                     pygame.mixer.music.stop()
 82.                 else:
 83.                     pygame.mixer.music.play(-1, 0.0)
 84.                 musicPlaying = not musicPlaying

The M key will turn the background music on or off. If musicPlaying is set to True, then the background music is currently playing and we should stop the music by calling pygame.mixer.music.stop(). If musicPlaying is set to False, then the background music isn’t currently playing and should be started by calling pygame.mixer.music.play().

Finally, no matter what, we want to toggle the value in musicPlaying. Toggling a Boolean value means to set to the opposite of its current value. The line musicPlaying = not musicPlaying sets the variable to False if it is currently True or sets it to True if it is currently False. Think of toggling as what happens when you flip a light switch on or off: toggling the light switch sets it to the opposite setting.

Drawing the Player on the Window

109.     # draw the block onto the surface
110.     windowSurface.blit(playerStretchedImage, player)

Remember that the value stored in playerStretchedImage is a Surface object. Line 110 draws the sprite of the player onto the window’s Surface object (which is stored in windowSurface).

The second parameter to the blit() method is a Rect object that specifies where on the Surface object the sprite should be blitted. The Rect object stored in player is what keeps track of the position of the player in the window.

Checking if the Player Has Collided with Cherries

114.         if player.colliderect(food):
115.             foods.remove(food)
116.             player = pygame.Rect(player.left, player.top, player.width + 2, player.height + 2)
117.             playerStretchedImage = pygame.transform.scale(playerImage, (player.width, player.height))
118.             if musicPlaying:
119.                 pickUpSound.play()

This code is similar to the code in the previous programs. But there are a couple of new lines. Call the play() method on the Sound object stored in the pickUpSound variable. But only do this if musicPlaying is set to True (which means that the sound is turned on).

When the player eats one of the cherries, the size of the player increases by two pixels in height and width. On line 116, a new Rect object that is 2 pixels larger than the old Rect object will be the new value of player.

While the Rect object represents the position and size of the player, the image of the player is stored in a playerStretchedImage as a Surface object. Create a new stretched image by calling pygame.transform.scale(). Be sure to pass the original Surface object in playerImage and not playerStretchedImage.

Stretching an image often distorts it a little. If you keep restretching a stretched image over and over, the distortions add up quickly. But by stretching the original image to the new size, you only distort the image once. This is why you pass playerImage as the first argument for pygame.transform.scale().

Draw the Cherries on the Window

121.     # draw the food
122.     for food in foods:
123.         windowSurface.blit(foodImage, food)

In the previous programs, you called the pygame.draw.rect() function to draw a green square for each Rect object stored in the foods list. However, in this program you want to draw the cherry sprites instead. Call the blit() method and pass the Surface object stored in foodImage. (This is the Surface object with the image of cherries drawn on it.)

The food variable (which contains each of the Rect objects in foods on each iteration through the for loop) tells the blit() method where to draw the foodImage.

Summary

This game has added images and sound to your games. The images (called sprites) look much better than the simple shape drawing used in the previous programs. The game presented in this chapter also has music playing in the background while also playing sound effects.

Sprites can be scaled (that is, stretched) to a larger or smaller size. This way we can display sprites at any size we want. This will come in handy in the game presented in the next chapter.

Now that we know how to create a window, display sprites and drawing primitives, collect keyboard and mouse input, play sounds, and implement collision detection, we are now ready to create a graphical game in Pygame. The next chapter brings all of these elements together for our most advanced game yet.
