  Capítulo 18
  DETECCIÓN DE COLISIONES Y ENTRADAS DE TECLADO/RATÓN

Temas Tratados En Este Capítulo:

• Detección de Colisiones
• No Modifiques una Lista Mientras Iteras Sobre Ella
• Entrada de Teclado en Pygame
• Entrada de Ratón en Pygame

Detección de colisiones es darse cuenta cuando dos cosas en la pantalla se han tocado (es decir, han colisionado). Por ejemplo, si el jugador toca un enemigo puede perder salud. O quizá el programa necesita saber cuando el jugador toca una moneda para recogerla automáticamente. Detección de colisiones puede ayudar a determinar si el personaje del juego está parado sobre el suelo o si no hay nada más que aire debajo de él.

En nuestros juegos, la detección de colisiones determinará si dos rectángulos se superponen o no. Nuestro próximo programa de ejemplo cubrirá esta técnica básica.

Más adelante en este capítulo, veremos cómo nuestros programas Pygame pueden recibir entradas del usuario a través del teclado o del ratón. Es un poco más complicado que llamar a la función input() como hicimos para nuestros programas de texto. Pero usar el teclado es mucho más interactivo en programas GUI. Y usar el ratón ni siquiera es posible en nuestros juegos de texto. Estos dos conceptos harán que tus juegos sean mucho más emocionantes.

Código Fuente del Programa de Detección de Colisiones

Gran parte de este código es similar al programa de animación, de modo que omitiremos la explicación del movimiento y los rebotes. (Ve el programa de animación en el Capítulo 17 para esta explicación). Un rebotín rebotará contra los bordes de la ventana. Una lista de objetos Rect representará cuadrados de comida.

En cada interacción durante el bucle del juego, el programa leerá cada objeto Rect en la lista y dibujará un cuadrado verde en la ventana. Cada cuarenta iteraciones del bucle del juego agregaremos un nuevo objeto Rect a la lista de modo que aparezcan constantemente nuevos cuadrados de comida en la pantalla.

El rebotín es representado por un diccionario. El diccionario tiene una clave llamada 'rect' (cuyo valor es un objeto pygame.Rect) y una clave llamada 'dir' (cuyo valor es una de las variables constantes de dirección como en el programa de Animación del capítulo anterior).

A medida que el rebotín rebota por la ventana, comprobamos si colisiona con alguno de los cuadrados de comida. Si es así, borramos ese cuadrado de comida de modo que ya no sea dibujado en la pantalla. Esto dará la impresión de que el rebotín "se come" los cuadrados de comida en la ventana.

Escribe lo siguiente en un nuevo archivo y guárdalo como detecciónColisión.py. Si obtienes errores después de haber copiado el código, compara el código que has escrito con el código del libro usando la herramienta online diff en http://invpy.com/diff/detecciónColisión.

detecciónColisión.py

  1. import pygame, sys, random
  2. from pygame.locals import *
  3. 
  4. def verifSuperposiciónRects(rect1, rect2):
  5.     for a, b in [(rect1, rect2), (rect2, rect1)]:
  6.         # Verifica si las esquinas de a se encuentran dentro de b
  7.         if ((puntoDentroDeRect(a.left, a.top, b)) or
  8.             (puntoDentroDeRect(a.left, a.bottom, b)) or
  9.             (puntoDentroDeRect(a.right, a.top, b)) or
 10.             (puntoDentroDeRect(a.right, a.bottom, b))):
 11.             return True
 12. 
 13.     return False
 14. 
 15. def puntoDentroDeRect(x, y, rect):
 16.     if (x > rect.left) and (x < rect.right) and (y > rect.top) and (y < rect.bottom):
 17.         return True
 18.     else:
 19.         return False
 20. 
 21. 
 22. # establece el juego
 23. pygame.init()
 24. relojPrincipal = pygame.time.Clock()
 25. 
 26. # establece la ventana
 27. ANCHOVENTANA = 400
 28. ALTOVENTANA = 400
 29. superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTOVENTANA), 0, 32)
 30. pygame.display.set_caption('Deteccion de Colisiones')
 31. 
 32. # establece las variables de dirección
 33. ABAJOIZQUIERDA = 1
 34. ABAJODERECHA = 3
 35. ARRIBAIZQUIERDA = 7
 36. ARRIBADERECHA = 9
 37. 
 38. VELOCIDADMOVIMIENTO = 4
 39. 
 40. # establece los colores
 41. NEGRO = (0, 0, 0)
 42. VERDE = (0, 255, 0)
 43. BLANCO = (255, 255, 255)
 44. 
 45. # establece las estructuras de datos de comida y rebotín
 46. contadorComida = 0
 47. NUEVACOMIDA = 40
 48. TAMAÑOCOMIDA = 20
 49. rebotín = {'rect':pygame.Rect(300, 100, 50, 50), 'dir':ARRIBAIZQUIERDA}
 50. comidas = []
 51. for i in range(20):
 52.     comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTOVENTANA - TAMAÑOCOMIDA), TAMAÑOCOMIDA, TAMAÑOCOMIDA))
 53. 
 54. # corre el bucle de juego
 55. while True:
 56.     # busca un evento QUIT
 57.     for evento in pygame.event.get():
 58.         if evento.type == QUIT:
 59.             pygame.quit()
 60.             sys.exit()
 61. 
 62.     contadorComida += 1
 63.     if contadorComida >= NUEVACOMIDA:
 64.         # añade nueva comida
 65.         contadorComida = 0
 66.         comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTOVENTANA - TAMAÑOCOMIDA), TAMAÑOCOMIDA, TAMAÑOCOMIDA))
 67. 
 68.     # Dibuja el fondo NEGRO sobre la superficie
 69.     superficieVentana.fill(NEGRO)
 70. 
 71.     # Mueve la estructura de datos rebotín
 72.     if rebotín['dir'] == ABAJOIZQUIERDA:
 73.         rebotín['rect'].left -= VELOCIDADMOVIMIENTO
 74.         rebotín['rect'].top += VELOCIDADMOVIMIENTO
 75.     if rebotín['dir'] == ABAJODERECHA:
 76.         rebotín['rect'].left += VELOCIDADMOVIMIENTO
 77.         rebotín['rect'].top += VELOCIDADMOVIMIENTO
 78.     if rebotín['dir'] == ARRIBAIZQUIERDA:
 79.         rebotín['rect'].left -= VELOCIDADMOVIMIENTO
 80.         rebotín['rect'].top -= VELOCIDADMOVIMIENTO
 81.     if rebotín['dir'] == ARRIBADERECHA:
 82.         rebotín['rect'].left += VELOCIDADMOVIMIENTO
 83.         rebotín['rect'].top -= VELOCIDADMOVIMIENTO
 84. 
 85.     # Verifica si rebotín se movió fuera de la ventana
 86.     if rebotín['rect'].top < 0:
 87.         # rebotín se movió por arriba de la ventana
 88.         if rebotín['dir'] == ARRIBAIZQUIERDA:
 89.             rebotín['dir'] = ABAJOIZQUIERDA
 90.         if rebotín['dir'] == ARRIBADERECHA:
 91.             rebotín['dir'] = ABAJODERECHA
 92.     if rebotín['rect'].bottom > ALTOVENTANA:
 93.         # rebotín se movió por debajo de la ventana
 94.         if rebotín['dir'] == ABAJOIZQUIERDA:
 95.             rebotín['dir'] = ARRIBAIZQUIERDA
 96.         if rebotín['dir'] == ABAJODERECHA:
 97.             rebotín['dir'] = ARRIBADERECHA
 98.     if rebotín['rect'].left < 0:
 99.         # rebotín se movió por la izquierda de la ventana
100.         if rebotín['dir'] == ABAJOIZQUIERDA:
101.             rebotín['dir'] = ABAJODERECHA
102.         if rebotín['dir'] == ARRIBAIZQUIERDA:
103.             rebotín['dir'] = ARRIBADERECHA
104.     if rebotín['rect'].right > ANCHOVENTANA:
105.         # rebotín se movió por la derecha de la ventana
106.         if rebotín['dir'] == ABAJODERECHA:
107.             rebotín['dir'] = ABAJOIZQUIERDA
108.         if rebotín['dir'] == ARRIBADERECHA:
109.             rebotín['dir'] = ARRIBAIZQUIERDA
110. 
111.     # Dibuja a rebotín en la superficie
112.     pygame.draw.rect(superficieVentana, BLANCO, rebotín['rect'])
113. 
114.     # Verifica si rebotín intersectó algun cuadrado de comida
115.     for comida in comidas[:]:
116.         if verifSuperposiciónRects(rebotín['rect'], comida):
117.             comidas.remove(comida)
118. 
119.     # Dibuja la comida
120.     for i in range(len(comidas)):
121.         pygame.draw.rect(superficieVentana, VERDE, comidas[i])
122. 
123.     # Dibuja la ventana en la pantalla
124.     pygame.display.update()
125.     relojPrincipal.tick(40)

El programa se verá como la Figura 18-1. El cuadrado rebotín irá rebotando por toda la pantalla. Al colisionar con los cuadrados de comida verdes estos desaparecerán de la pantalla.

Figura 18-1: Una captura de pantalla alterada del programa Detección de Colisiones.

Importando los Módulos

  1. import pygame, sys, random
  2. from pygame.locals import *

El programa de detección de colisiones importa las mismas cosas que el programa de animación del capítulo anterior, junto con el módulo random.

El Algoritmo de Detección de Colisiones

  4. def verifSuperposiciónRects(rect1, rect2):

Para detectar colisiones, necesitas una función que pueda determinar si dos rectángulos colisionan entre sí o no. La Figura 18-2 muestra ejemplos de rectángulos que colisionan y rectángulos que no colisionan.

Figura 18-2: Ejemplos de rectángulos que colisionan (izquierda) y rectángulos que no colisionan (derecha).

verifSuperposiciónRects() recibe dos objetos pygame.Rect. La función devuelve True si colisionan y False si no lo hacen. Hay una regla simple a seguir para determinar si los rectángulos colisionan. Mira cada una de las cuatro esquinas de ambos rectángulos. Si al menos una de estas ocho esquinas está dentro del otro rectángulo, quiere decir que los rectángulos han colisionado. Podemos usar esto para determinar si verifSuperposiciónRects() debe devolver True o False.

  5.     for a, b in [(rect1, rect2), (rect2, rect1)]:
  6.         # Verifica si las esquinas de a se encuentran dentro de b
  7.         if ((puntoDentroDeRect(a.left, a.top, b)) or
  8.             (puntoDentroDeRect(a.left, a.bottom, b)) or
  9.             (puntoDentroDeRect(a.right, a.top, b)) or
 10.             (puntoDentroDeRect(a.right, a.bottom, b))):
 11.             return True

Las líneas 5 a 11 comprueban si las esquinas de un rectángulo están dentro del otro. Más tarde, crearemos una función llamada puntoDentroDeRect() que devuelve True si las coordenadas XY del punto está dentro del rectángulo. Llamaremos a esta función para cada una de las ocho esquinas, y si alguna de estas llamadas devuelve True, los operadores or harán que toda la condición sea True.

Los parámetros de verifSuperposiciónRects() son rect1 y rect2. Primero comprueba si las esquinas de rect1 están dentro de rect2, y después si las esquinas de rect2 están dentro de rect1.

No necesitas repetir para rect1 y rect2 el código que comprueba las cuatro esquinas. En cambio, puedes usar a y b en las líneas 7 a 10. El bucle for en la línea 5 usa asignación múltiple. En la primera iteración, a toma el valor rect1 y b toma el valor rect2. En la segunda iteración del bucle, es lo opuesto: a adquiere el valor rect2 y b toma rect1. 

 13.     return False

Si la línea 11 nunca devuelve True, entonces nuinguna de las ocho esquinas comprobadas está dentro del otro rectángulo. En ese caso, los rectángulos no han colisionado y la línea 13 devuelve False.

Determinando si un Punto está Dentro de un Rectángulo

 15. def puntoDentroDeRect(x, y, rect):
 16.     if (x > rect.left) and (x < rect.right) and (y > rect.top) and (y < rect.bottom):
 17.         return True

La función puntoDentroDeRect() es llamada desde verifSuperposiciónRects(). La función puntoDentroDeRect() devolverá True si las coordenadas XY pasadas se encuentran dentro del objeto pygame.Rect pasado como tercer parámetro. De otro modo, esta función devuelve False.

La Figura 18-3 es un ejemplo de un rectángulo y varios puntos. Los puntos y las esquinas del rectángulo están etiquetados con sus coordenadas.

Un punto está dentro del rectángulo si se cumplen las siguientes cuatro afirmaciones:

• La coordenada X del punto es mayor que la coordenada X del borde izquierdo del rectángulo.
• La coordenada X del punto es menor que la coordenada X del borde derecho del rectángulo.
• La coordenada Y del punto es mayor que la coordenada Y del borde inferior del rectángulo.
• La coordenada Y del punto es menor que la coordenada Y del borde superior del rectángulo.

Si alguna de estas es False, entonces el punto está fuera del rectángulo. La línea 16 combina estas cuatro afirmaciones en la condición de la sentencia if utilizando operadores and.

Figura 18-3: Ejemplo de coordenadas dentro y fuera de un rectángulo. Los puntos (50, 30), (85, 30) y (50, 50) están dentro del rectángulo, el resto están afuera del mismo.

 18.     else:
 19.         return False

Esta función es llamada desde la función verifSuperposiciónRects() para ver si alguna de las esquinas de los objetos pygame.Rect está dentro del otro. Estas dos funciones te permiten detectar colisiones entre dos rectángulos.

El Objeto pygame.time.Clock y el Método tick()

La mayor parte de las líneas 22 a 43 hace lo mismo que hacía el programa de Animación del capítulo anterior: inicializar Pygame, establecer ANCHOVENTANA y ALTOVENTANA, y asignar las constantes de color y dirección.

Sin embargo, la línea 24 es nueva:

 24. relojPrincipal = pygame.time.Clock()

En el programa anterior de Animación, una llamada a time.sleep(0.02) reducía la velocidad del programa de modo que no corriese demasiado rápido. El problema con time.sleep() es que puede representar una pausa demasiado larga para computadoras lentas y demasiado corta para computadoras rápidas. 

Un objeto pygame.time.Clock puede generar una pausa que sea adecuada para cualquier computadora. La línea 125 llama a mainClock.tick(40) dentro del bucle del juego. Esta llamada al método tick() del objeto Clock calcula la pausa adecuada para que el bucle ejecute unas 40 iteraciones por segundo, sin importar cuál sea la velocidad de la computadora. Esto asegura que el juego nunca se ejecute más rápido de lo esperado. La llamada a tick() debe hacerse sólo una vez en el bucle del juego.

Configurando la Ventana y las Estructuras de Datos

 45. # establece las estructuras de datos de comida y rebotín
 46. contadorComida = 0
 47. NUEVACOMIDA = 40
 48. TAMAÑOCOMIDA = 20

Las líneas 46 a 48 configuran algunas variables para los bloques de comida que aparecen en la pantalla. contadorComida comenzará en el valor 0, NUEVACOMIDA en 40, y TAMAÑOCOMIDA en 20.

 49. rebotín = {'rect':pygame.Rect(300, 100, 50, 50), 'dir':ARRIBAIZQUIERDA}

La línea 49 configura una nueva estructura de datos llamada rebotín. rebotín es un diccionario con dos claves. La clave 'rect' contiene un objeto pygame.Rect que representa el tamaño y la posición del rebotín.

La clave 'dir' contiene la dirección en la cual el rebotín se está moviendo. El rebotín se moverá de la misma forma en que se movían los bloques en el programa de animación del Capítulo 17.

 50. comidas = []
 51. for i in range(20):
 52.     comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTOVENTANA - TAMAÑOCOMIDA), TAMAÑOCOMIDA, TAMAÑOCOMIDA))

El programa lleva un registro de todos los cuadrados de comida con una lista de objetos Rect en comidas. Las líneas 51 y 52 crean veinte cuadrados de comida ubicados aleatoriamente en la pantalla. Puedes usar la función random.randint() para generar coordenadas XY aleatorias.

En la línea 52, llamamos a la función constructor pygame.Rect() para que devuelva un nuevo objeto pygame.Rect. Este objeto representará la posición y el tamaño del cuadrado de comida. Los primeros dos parámetros para pygame.Rect() son las coordenadas XY de la esquina superior izquierda. Queremos que la coordenada aleatoria esté entre 0 y el tamaño de la ventana menos el tamaño del cuadrado de comida. Si la coordenada aleatoria estuviese simplemente entre 0 y el tamaño de la ventana, el cuadrado de comida podría quedar fuera de la ventana, como en la Figura 18-4.

Figura 18-4: Para un rectángulo de 20 por 20, tener su esquina superior izquierda en (400, 200) en una ventana de 400 por 400 significaría estar fuera de la ventana. Para que el cuadrado esté contenido en de la ventana, la esquina superior izquierda debería estar en (380, 200).

El tercer parámetro de pygame.Rect() es una tupla que contiene el ancho y la altura del cuadrado de comida. Tanto el ancho como la altura corresponden al valor en la constante TAMAÑOCOMIDA.

Dibujando el Rebotín en la Pantalla

Las líneas 71 a 109 hacen que el rebotín se mueva por la ventana y rebote contra los bordes de la misma. Este código es similar a las líneas 44 a 83 del programa de Animación del capítulo anterior, por lo que omitiremos su explicación.

111.     # Dibuja a rebotín en la superficie
112.     pygame.draw.rect(superficieVentana, BLANCO, rebotín['rect'])

Luego de desplazar al rebotín, la línea 112 lo dibuja en su nueva posición. La superficieVentana pasada como primer parámetro indica a Python sobre cuál objeto Surface dibujar el rectángulo. La variable BLANCO, que almacena la tupla (255, 255, 255), indica a Python que dibuje un rectángulo blanco. El objeto Rect guardado en el diccionario rebotín en la clave 'rect' indica la posición y el tamaño del rectángulo a dibujar.

Colisionando con los Cuadrados de Comida

114.     # Verifica si rebotín intersectó algun cuadrado de comida
115.     for comida in comidas[:]:

Antes de dibujar los cuadrados de comida, se comprueba si el rebotín se superpone con alguno de los cuadrados de comida. Si es así, quita ese cuadrado de comida de la lista de comidas. De esta forma, Python no dibujará los cuadrados de comida que el rebotín se halla "comido".

En cada iteración del bucle for, el cuadrado de comida actual de la lista de comidas (plural) se asigna a la variable comida (singular).

No Agregues o Borres elementos de una Lista mientras Iteras Sobre Ella

Nota que hay una pequeña diferencia en este bucle for. Si observas detalladamente la línea 116, verás que no está iterando sobre comidas, sino sobre comidas[:].

Recuerda como funcionan las operaciones de rebanado. comidas[:2] se evalúa a una copia de la lista con los ítems desde el principio hasta el ítem en el índice 2 (sin incluir a este último). comidas[3:] se evalúa a una copia de la lista con los ítems desde el índice 3 y hasta el final de la lista.

comidas[:] develve una copia de la lista con todos sus ítems (del primero al último). Básicamente, comidas[:] crea una nueva lista con una copia de todos los ítems en comidas. Esta es una forma de copiar la lista más corta que, por ejemplo, lo que hace la función obtenerDuplicadoTablero() en el juego de Ta Te Ti.

No puedes agregar o quitar ítems de una lista mientras estás iterando sobre ella. Python puede perder la cuenta de cuál debería ser el próximo valor de la variable comida si el tamaño de la lista comidas está cambiando. Piensa en lo difícil que sería contar el número de caramelos en un frasco mientras alguien está agregando o quitando caramelos.

Pero si iteras sobre una copia de la lista (y la copia no cambia mientras lo haces), agregar o quitar ítems de la lista original no será un problema.

Quitando los Cuadrados de Comida

116.         if verifSuperposiciónRects(rebotín['rect'], comida):
117.             comidas.remove(comida)

La línea 116 es donde verifSuperposiciónRects() resulta útil. Si el rebotín y el cuadrado de comida se superponen, entonces verifSuperposiciónRects() devuelve True y la línea 117 quita el cuadrado de comida superpuesto de la lista de comidas.

Dibujando los Cuadrados de Comida en la Pantalla

119.     # Dibuja la comida
120.     for i in range(len(comidas)):
121.         pygame.draw.rect(superficieVentana, VERDE, comidas[i])

El código en las líneas 120 y 121 es similar a la forma en que dibujamos el cuadrado blanco para el jugador. La línea 120 pasa por cada cuadrado de comida sobre la superficie de superficieVentana. Este programa es similar al programa del rebotín en el capítulo anterior, sólo que ahora el cuadrado que rebota se "come" a los otros cuadrados si pasa por encima de ellos.

Estos últimos programas son interesantes para observar, pero el usuario no puede controlar nada. En el siguiente programa, aprenderemos a obtener entradas desde el teclado.

Código Fuente del Programa de Entradas de Teclado

Crea un archivo nuevo y escribe el siguiente código, luego guárdalo como pygameEntrada.py. Si obtienes errores luego de haber escrito el código, compara el código que has escrito con el del libro usando la herramienta digg online en http://invpy.com/diff/pygameEntrada. 

pygameEntrada.py

  1. import pygame, sys, random
  2. from pygame.locals import *
  3. 
  4. # configurar pygame
  5. pygame.init()
  6. relojPrincipal = pygame.time.Clock()
  7. 
  8. # configurar la ventana
  9. ANCHOVENTANA = 400
 10. ALTURAVENTANA = 400
 11. superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTURAVENTANA), 0, 32)
 12. pygame.display.set_caption('Entrada')
 13. 
 14. # configurar los colores
 15. NEGRO = (0, 0, 0)
 16. VERDE = (0, 255, 0)
 17. BLANCO = (255, 255, 255)
 18. 
 19. # configurar estructura de datos del jugador y la comida
 20. contadorDeComida = 0
 21. NUEVACOMIDA = 40
 22. TAMAÑOCOMIDA = 20
 23. jugador = pygame.Rect(300, 100, 50, 50)
 24. comidas = []
 25. for i in range(20):
 26.     comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTURAVENTANA - TAMAÑOCOMIDA),  20. TAMAÑOCOMIDA, TAMAÑOCOMIDA))
 27. 
 28. # configurar variables de movimiento
 29. moverseIzquierda = False
 30. moverseDerecha = False
 31. moverseArriba = False
 32. moverseAbajo = False
 33. 
 34. MOVESPEED = 6
 35. 
 36. 
 37. # ejecutar el bucle del juego
 38. while True:
 39.     # comprobar eventos
 40.     for evento in pygame.event.get():
 41.         if evento.type == QUIT:
 42.             pygame.quit()
 43.             sys.exit()
 44.         if evento.type == KEYDOWN:
 45.             # cambiar las variables del teclado
 46.             if evento.key == K_LEFT or evento.key == ord('a'):
 47.                 moverseDerecha = False
 48.                 moverseIzquierda = True
 49.             if evento.key == K_RIGHT or evento.key == ord('d'):
 50.                 moverseIzquierda = False
 51.                 moverseDerecha = True
 52.             if evento.key == K_UP or evento.key == ord('w'):
 53.                 moverseAbajo = False
 54.                 moverseArriba = True
 55.             if evento.key == K_DOWN or evento.key == ord('s'):
 56.                 moverseArriba = False
 57.                 moverseAbajo = True
 58.         if evento.type == KEYUP:
 59.             if evento.key == K_ESCAPE:
 60.                 pygame.quit()
 61.                 sys.exit()
 62.             if evento.key == K_LEFT or evento.key == ord('a'):
 63.                 moverseIzquierda = False
 64.             if evento.key == K_RIGHT or evento.key == ord('d'):
 65.                 moverseDerecha = False
 66.             if evento.key == K_UP or evento.key == ord('w'):
 67.                 moverseArriba = False
 68.             if evento.key == K_DOWN or evento.key == ord('s'):
 69.                 moverseAbajo = False
 70.             if evento.key == ord('x'):
 71.                 jugador.top = random.randint(0, ALTURAVENTANA - jugador.height)
 72.                 jugador.left = random.randint(0, ANCHOVENTANA - jugador.width)
 73. 
 74.         if evento.type == MOUSEBUTTONUP:
 75.             comidas.append(pygame.Rect(evento.pos[0], evento.pos[1], TAMAÑOCOMIDA, TAMAÑOCOMIDA))
 76. 
 77.     contadorDeComida += 1
 78.     if contadorDeComida >= NUEVACOMIDA:
 79.         # agregar nueva comida
 80.         contadorDeComida = 0
 81.         comidas.append(pygame.Rect(random.randint(0, ANCHOVENTANA - TAMAÑOCOMIDA), random.randint(0, ALTURAVENTANA - TAMAÑOCOMIDA), TAMAÑOCOMIDA, TAMAÑOCOMIDA))
 82. 
 83.     # dibujar el fondo negro sobre la superficie
 84.     superficieVentana.fill(NEGRO)
 85. 
 86.     # mover al jugador
 87.     if moverseAbajo and jugador.bottom < ALTURAVENTANA:
 88.         jugador.top += MOVESPEED
 89.     if moverseArriba and jugador.top > 0:
 90.         jugador.top -= MOVESPEED
 91.     if moverseIzquierda and jugador.left > 0:
 92.         jugador.left -= MOVESPEED
 93.     if moverseDerecha and jugador.right < ANCHOVENTANA:
 94.         jugador.right += MOVESPEED
 95. 
 96.     # dibujar al jugador sobre la superficie
 97.     pygame.draw.rect(superficieVentana, BLANCO, jugador)
 98. 
 99.     # comprobar si el jugador ha intersectado alguno de los cuadrados de comida
100.     for food in comidas[:]:
101.         if jugador.colliderect(food):
102.             comidas.remove(food)
103. 
104.     # dibujar la comida
105.     for i in range(len(comidas)):
106.         pygame.draw.rect(superficieVentana, VERDE, comidas[i])
107. 
108.     # dibujar la ventana sobre la pantalla
109.     pygame.display.update()
110.     relojPrincipal.tick(40)

Este programa es idéntico al programa de detección de colisiones. Pero en este programa, el rebotín sólo se mueve mientras el jugador mantiene pulsadas las flechas del teclado.

También puedes hacer clic en cualquier lugar de la ventana y crear nuevos objetos comida. Además, la tecla ESC sale del programa y la "X" teletransporta al jugador a un lugar aleatorio en la pantalla.

Configurando la Ventana y las Estructuras de Datos

Comenzando en la línea 29, el código configura algunas variables que registran el movimiento del rebotín.

 28. # configurar variables de movimiento
 29. moverseIzquierda = False
 30. moverseDerecha = False
 31. moverseArriba = False
 32. moverseAbajo = False

Las cuatro variables tiene valores Booleanos para registrar cuáles de las flechas del teclado están siendo pulsadas. Por ejemplo, cuando el usuario pulsa la flecha izquierda en su teclado, se asigna True a moverseIzquierda. Cuando el usuario suelta la tecla, moverseIzquierda vuelve a ser False.

Las líneas 34 a 43 son idénticas al código en los programas Pygame anteriores. Estas líneas gestionan el comienzo del bucle de juego y qué hacer cuando el usuario sale del programa. Omitiremos la explicación de este código que ya ha sido cubierto en el capítulo anterior.

Eventos y Manejo del Evento KEYDOWN

El código para manejar los eventos de tecla pulsada y tecla liberada comienza en la línea 44. Al comienzo del programa, se asigna False a todos estos eventos.

 44.         if evento.type == KEYDOWN:

Pygame has an event type called KEYDOWN. This is one of the other events that Pygame can generate. A brief list of the events that could be returned by pygame.event.get() is in Table 18-1.

Table 18-1: Events and when they are generated.
Event Type  Description
QUIT  Generated when the user closes the window.
KEYDOWN Generated when the user presses down a key. Has a key attribute that tells which key was pressed. Also has a mod attribute that tells if the Shift, Ctrl, Alt, or other keys were held down when this key was pressed.
KEYUP Generated when the user releases a key. Has a key and mod attribute that are similar to those for KEYDOWN.
MOUSEMOTION Generated whenever the mouse moves over the window. Has a pos attribute that returns tuple (x, y) for the coordinates of where the mouse is in the window. The rel attribute also returns a (x, y) tuple, but it gives coordinates relative since the last MOUSEMOTION event. For example, if the mouse moves left by four pixels from (200, 200) to (196, 200), then rel will be the tuple value (-4, 0).
The buttons attribute returns a tuple of three integers. The first integer in the tuple is for the left mouse button, the second integer for the middle mouse button (if there’s a middle mouse button), and the third integer is for the right mouse button. These integers will be 0 if they are not being pressed down when the mouse moved and 1 if they are pressed down.
MOUSEBUTTONDOWN Generated when a mouse button is pressed down in the window. This event has a pos attribute which is an (x, y) tuple for the coordinates of where the mouse was when the button was pressed. There is also a button attribute which is an integer from 1 to 5 that tells which mouse button was pressed, explained in Table 18-2.
MOUSEBUTTONUP Generated when the mouse button is released. This has the same attributes as MOUSEBUTTONDOWN.

Table 18-2: The button attribute values and mouse button.
Value of button Mouse Button
1 Left button
2 Middle button
3 Right button
4 Scroll wheel moved up
5 Scroll wheel moved down

Setting the Four Keyboard Variables

 45.             # cambiar las variables del teclado
 46.             if evento.key == K_LEFT or evento.key == ord('a'):
 47.                 moverseDerecha = False
 48.                 moverseIzquierda = True
 49.             if evento.key == K_RIGHT or evento.key == ord('d'):
 50.                 moverseIzquierda = False
 51.                 moverseDerecha = True
 52.             if evento.key == K_UP or evento.key == ord('w'):
 53.                 moverseAbajo = False
 54.                 moverseArriba = True
 55.             if evento.key == K_DOWN or evento.key == ord('s'):
 56.                 moverseArriba = False
 57.                 moverseAbajo = True

If the event type is KEYDOWN, then the event object will have a key attribute that tells which key was pressed down. Line 46 compares this attribute to K_LEFT, which is the pygame.locals constant that represents the left arrow key on the keyboard. Lines 46 to 57 do similar checks for each of the other arrow keys: K_LEFT, K_RIGHT, K_UP, K_DOWN.

When one of these keys is pressed down, set the corresponding movement variable to True. Also, set the movement variable of the opposite direction to False.

For example, the program executes lines 47 and 48 when the left arrow key has been pressed. In this case, set moveLeft to True and moveRight to False (even though moveRight might already be False, set it to False just to be sure).

On line 46, in event.key can either be equal to K_LEFT or ord('a'). The value in event.key is set to the integer ordinal value of the key that was pressed on the keyboard. (There is no ordinal value for the arrow keys, which is why we use the constant variable K_LEFT.) You can use the ord() function to get the ordinal value of any single character to compare it with event.key.

By executing the code on lines 47 and 48 if the keystroke was either K_LEFT or ord('a'), you make the left arrow key and the A key do the same thing. The W, A, S, and D keys are all used as alternates for changing the movement variables. The WASD (pronounced “wazz-dee”) keys let you use your left hand. The arrow keys can be pressed with your right hand.

Figure 18-5: The WASD keys can be programmed to do the same thing as the arrow keys.

Handling the KEYUP Event

 58.         if evento.type == KEYUP:

When the user releases the key that they are holding down, a KEYUP event is generated.

 59.             if evento.key == K_ESCAPE:
 60.                 pygame.quit()
 61.                 sys.exit()

If the key that the user released was the ESC key, then terminate the program. Remember, in Pygame you must call the pygame.quit() function before calling the sys.exit() function.

Lines 62 to 69 will set a movement variable to False if that direction’s key was let go.

 62.             if evento.key == K_LEFT or evento.key == ord('a'):
 63.                 moverseIzquierda = False
 64.             if evento.key == K_RIGHT or evento.key == ord('d'):
 65.                 moverseDerecha = False
 66.             if evento.key == K_UP or evento.key == ord('w'):
 67.                 moverseArriba = False
 68.             if evento.key == K_DOWN or evento.key == ord('s'):
 69.                 moverseAbajo = False

Teleporting the Player

 70.             if evento.key == ord('x'):
 71.                 jugador.top = random.randint(0, ALTURAVENTANA - jugador.height)
 72.                 jugador.left = random.randint(0, ANCHOVENTANA - jugador.width)

You can also add teleportation to the game. If the user presses the “X” key, then lines 71 and 72 will set the position of the user’s square to a random place on the window. This will give the user the ability to teleport around the window by pushing the “X” key. Although they can’t control where they will teleport; it’s completely random.

Handling the MOUSEBUTTONUP Event

 74.         if evento.type == MOUSEBUTTONUP:
 75.             comidas.append(pygame.Rect(evento.pos[0], evento.pos[1], TAMAÑOCOMIDA, TAMAÑOCOMIDA))

Mouse input is handled by events just like keyboard input is. The MOUSEBUTTONUP event occurs when the user releases the mouse button after clicking it. The pos attribute in the Event object is set to a tuple of two integers for the XY coordinates for where the mouse cursor was at the time of the click.

On line 75, the X-coordinate is stored in event.pos[0] and the Y-coordinate is stored in event.pos[1]. Line 75 creates a new Rect object to represent a new food and place it where the MOUSEBUTTONUP event occurred. By adding a new Rect object to the foods list, the code will display a new food square is displayed on the screen.

Moving the Player Around the Screen

 86.     # mover al jugador
 87.     if moverseAbajo and jugador.bottom < ALTURAVENTANA:
 88.         jugador.top += MOVESPEED
 89.     if moverseArriba and jugador.top > 0:
 90.         jugador.top -= MOVESPEED
 91.     if moverseIzquierda and jugador.left > 0:
 92.         jugador.left -= MOVESPEED
 93.     if moverseDerecha and jugador.right < ANCHOVENTANA:
 94.         jugador.right += MOVESPEED

You’ve set the movement variables (moveDown, moveUp, moveLeft, and moveRight) to True or False depending on what keys the user has pressed. Now move the player’s square (which is represented by the pygame.Rect object stored in player) by adjusting XY coordinates of player.

If moveDown is set to True (and the bottom of the player’s square isn’t below the bottom edge of the window), then line 88 moves the player’s square down by adding MOVESPEED to the player’s current top attribute. Lines 89 to 94 do the same thing for the other three directions.

The colliderect() Method

 99.     # comprobar si el jugador ha intersectado alguno de los cuadrados de comida
100.     for food in comidas[:]:
101.         if jugador.colliderect(food):
102.             comidas.remove(food)

In the previous Collision Detection program, the verifSuperposiciónRects() function to check if one rectangle had collided with another. That function was included in this book so you could understand how the code behind collision detection works.

In this program, you can use the collision detection function that comes with Pygame. The colliderect() method for pygame.Rect objects is passed another pygame.Rect object as an argument and returns True if the two rectangles collide and False if they do not.

110.     relojPrincipal.tick(40)

The rest of the code is similar to the code in the Input and Collision Detection programs.

Summary

This chapter introduced the concept of collision detection, which is in many graphical games. Detecting collisions between two rectangles is easy: check if the four corners of either rectangle are within the other rectangle. This is such a common thing to check for that Pygame provides its own collision detection method named colliderect() for pygame.Rect objects.

The first several games in this book were text-based. The program output was text printed to the screen and the input was text typed by the user on the keyboard. But graphical programs can accept keyboard and mouse inputs.

Furthermore, these programs can respond to single keystrokes when the user pushes down or lets up a single key. The user doesn’t have to type in an entire response and press ENTER. This allows for immediate feedback and much more interactive games.
