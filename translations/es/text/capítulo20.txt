  Capítulo 20
  EVASOR

Temas Tratados En Este Capítulo:

• La bandera pygame.FULLSCREEN
• Variables constantes de Pygame para las teclas
• El método Rect.move_ip()
• La función pygame.mouse.set_pos()
• Implementando códigos de trucos
• Modificando el juego Evasor

En los últimos tres capítulos hemos repasado el módulo Pygame y demostrado cómo usar sus múltiples características. En este capítulo, usaremos ese conocimiento para crear un juego gráfico llamado Evasor.

En el juego Evasor el jugador controla a una pequeña persona (a quien llamamos el personaje del jugador) que debe evadir a un montón de villanos que caen desde el borde superior de la pantalla. Cuanto más tiempo consiga el jugador evadir a los villanos mejor puntaje obtendrá en el juego.

Sólo por diversión, hemos agregado también al juego algunos trucos. Si el jugador mantiene pulsada la tecla "x", los villanos comienzan a moverse super lento. Si el jugador mantiene pulsada la tecla "z", los villanos revertirán su trayectoria y se moverán hacia arriba en lugar de hacia abajo.

Revisión de los Tipos de Datos Básicos Pygame

Revisemos algunos de los tipos de datos básicos usados en Pygame:

• pygame.Rect - Los objetos Rect representan la ubicación y el tamaño de un espacio rectangular. La ubicación puede determinarse a partir de su atributo topleft (o los atributos topright, bottomleft y bottomright). Estos atributos esquina son una tupla de enteros corresopndientes a las coordenadas X e Y. El tamaño puede determinarse a partir de los atributos width y height, números enteros que indican cuántos píxeles de ancho y cuántos de alto tiene el área rectangular. Los objetos Rect tienen un método colliderect() para comprobar si colisionan con otro objeto Rect.
• pygame.Surface - Los objetos Surface son áreas de píxeles coloreados. Los objetos Surface representan una imagen rectangular, mientras que los objetos Rect sólo representan un espacio rectangular y su ubicación. Los objetos Surface tienen un método blit() que se usa para dibujar la imagen de un objeto Surface sobre otro objeto Surface. El objeto Surface devuelto por la función pygame.display.set_mode() es especial porque cualquier cosa que dibujemos sobre ese objeto Surface se muestra en la pantalla del usuario al llamar a pygame.display.update().
• pygame.event.Event - El módulo pygame.event genera objetos Event cada vez que el usuario provee entradas de teclado, ratón o cualquier otro tipo de entradas. La función pygame.event.get() devuelve una lista de estos objetos Event. Puedes ver a qué tipo de evento corresponde el objeto Event mirando su atributo type. QUIT, KEYDOWN y MOUSEBUTTONUP son algunos ejemplos de tipos de eventos.
• pygame.font.Font - El módulo pygame.font tiene el tipo de datos Font que representa la fuente (tipografía) del texto en Pygame. Los argumentos que recibe pygame.font.SysFont() son una cadena con el nombre de la fuente y un entero con el tamaño de letra. Sin embargo es común ingresar None como nombre de la fuente para utilizar la fuente por defecto del sistema.
• pygame.time.Clock - El objeto Clock del módulo pygame.time es útil para evitar que nuestros juegos se ejecuten a la máxima velocidad posible. El objeto Clock tiene un método tick(), al cual le pasamos a cuántos cuadros por segundo (FPS) queremos que se ejecute el juego. Cuanto más alto sea el valor FPS, más rápido se ejecutará el juego.

Escribe el siguiente código y guárdalo en un archivo llamado evasor.py. Este juego requiere además otros archivos de sonido e imagen que puedes descargar de la URL http://invpy.com/downloads.

Código Fuente de Evasor

Puedes descargar este código de la URL http://invpy.com/chap20. Si obtienes errores luego de escribir el código, compara lo que has escrito con el código fuente del libro con la herramienta diff online en http://invpy.com/diff/evasor.

  1. import pygame, random, sys
  2. from pygame.locals import *
  3. 
  4. ANCHOVENTANA = 600
  5. ALTOVENTANA = 600
  6. COLORVENTANA = (255, 255, 255)
  7. COLORFONDO = (0, 0, 0)
  8. FPS = 40
  9. TAMAÑOMINVILLANO = 10
 10. TAMAÑOMAXVILLANO = 40
 11. VELOCIDADMINVILLANO = 1
 12. VELOCIDADMAXVILLANO = 8
 13. TASANUEVOVILLANO = 6
 14. TASAMOVIMIENTOJUGADOR = 5
 15. 
 16. def terminar():
 17.     pygame.quit()
 18.     sys.exit()
 19. 
 20. def esperarTeclaJugador():
 21.     while True:
 22.         for evento in pygame.event.get():
 23.             if evento.type == QUIT:
 24.                 terminar()
 25.             if evento.type == KEYDOWN:
 26.                 if evento.key == K_ESCAPE:  # Sale del juego al presionar ESCAPE
 27.                     terminar()
 28.                 return
 29. 
 30. def jugadorGolpeaVillano(rectanguloJugador, villanos):
 31.     for v in villanos:
 32.         if rectanguloJugador.colliderect(v['rect']):
 33.             return True
 34.     return False
 35. 
 36. def dibujarTexto(texto, fuente, superficie, x, y):
 37.     objetotexto = fuente.render(texto, 1, COLORVENTANA)
 38.     rectangulotexto = objetotexto.get_rect()
 39.     rectangulotexto.topleft = (x, y)
 40.     superficie.blit(objetotexto, rectangulotexto)
 41. 
 42. # establece un pygame, la ventana y el cursor del ratón
 43. pygame.init()
 44. relojPrincipal = pygame.time.Clock()
 45. superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTOVENTANA))
 46. pygame.display.set_caption('Esquivador')
 47. pygame.mouse.set_visible(False)
 48. 
 49. # establece las fuentes
 50. fuente = pygame.font.SysFont(None, 48)
 51. 
 52. # establece los sonidos
 53. sonidoJuegoTerminado = pygame.mixer.Sound('juegoterminado.wav')
 54. pygame.mixer.music.load('músicaDeFondo.mid')
 55. 
 56. # establece las imagenes
 57. imagenJugador = pygame.image.load('jugador.png')
 58. rectanguloJugador = imagenJugador.get_rect()
 59. imagenVillano = pygame.image.load('villano.png')
 60. 
 61. # Muestra la pantalla inicial
 62. dibujarTexto('Evasor', fuente, superficieVentana, (ANCHOVENTANA / 3)+40, (ALTOVENTANA / 3))
 63. dibujarTexto('Presione una tecla para comenzar.', fuente, superficieVentana, (ANCHOVENTANA / 3) - 180, (ALTOVENTANA / 3) + 50)
 64. pygame.display.update()
 65. esperarTeclaJugador()
 66. 
 67. 
 68. puntajeMax = 0
 69. while True:
 70.     # establece el comienzo del juego
 71.     villanos = []
 72.     puntaje = 0
 73.     rectanguloJugador.topleft = (ANCHOVENTANA / 2, ALTOVENTANA - 50)
 74.     moverIzquierda = moverDerecha = moverArriba = moverAbajo = False
 75.     trucoReversa = trucoLento = False
 76.     contadorAgregarVillano = 0
 77.     pygame.mixer.music.play(-1, 0.0)
 78. 
 79.     while True: # el ciclo del juego se mantiene mientras se este jugando
 80.         puntaje += 1 # incrementa el puntaje
 81. 
 82.         for evento in pygame.event.get():
 83.             if evento.type == QUIT:
 84.                 terminar()
 85. 
 86.             if evento.type == KEYDOWN:
 87.                 if evento.key == ord('z'):
 88.                     trucoReversa = True
 89.                 if evento.key == ord('x'):
 90.                     trucoLento = True
 91.                 if evento.key == K_LEFT or evento.key == ord('a'):
 92.                     moverDerecha = False
 93.                     moverIzquierda = True
 94.                 if evento.key == K_RIGHT or evento.key == ord('d'):
 95.                     moverIzquierda = False
 96.                     moverDerecha = True
 97.                 if evento.key == K_UP or evento.key == ord('w'):
 98.                     moverAbajo = False
 99.                     moverArriba = True
100.                 if evento.key == K_DOWN or evento.key == ord('s'):
101.                     moverArriba = False
102.                     moverAbajo = True
103. 
104.             if evento.type == KEYUP:
105.                 if evento.key == ord('z'):
106.                     trucoReversa = False
107.                     puntaje = 0
108.                 if evento.key == ord('x'):
109.                     trucoLento = False
110.                     puntaje = 0
111.                 if evento.key == K_ESCAPE:
112.                         terminar()
113. 
114.                 if evento.key == K_LEFT or evento.key == ord('a'):
115.                     moverIzquierda = False
116.                 if evento.key == K_RIGHT or evento.key == ord('d'):
117.                     moverDerecha = False
118.                 if evento.key == K_UP or evento.key == ord('w'):
119.                     moverArriba = False
120.                 if evento.key == K_DOWN or evento.key == ord('s'):
121.                     moverAbajo = False
122. 
123.             if evento.type == MOUSEMOTION:
124.                 # Si se mueve el ratón, este se mueve al lugar donde esté el cursor.
125.                 rectanguloJugador.move_ip(evento.pos[0] - rectanguloJugador.centerx, evento.pos[1] - rectanguloJugador.centery)
126. 
127.         # Añade villanos en la parte superior de la pantalla, de ser necesarios.
128.         if not trucoReversa and not trucoLento:
129.             contadorAgregarVillano += 1
130.         if contadorAgregarVillano == TASANUEVOVILLANO:
131.             contadorAgregarVillano = 0
132.             tamañoVillano = random.randint(TAMAÑOMINVILLANO, TAMAÑOMAXVILLANO)
133.             nuevoVillano = {'rect': pygame.Rect(random.randint(0, ANCHOVENTANA-tamañoVillano), 0 - tamañoVillano, tamañoVillano, tamañoVillano),
134.                         'velocidad': random.randint(VELOCIDADMINVILLANO, VELOCIDADMAXVILLANO),
135.                         'superficie':pygame.transform.scale(imagenVillano, (tamañoVillano, tamañoVillano)),
136.                         }
137. 
138.             villanos.append(nuevoVillano)
139. 
140.         # Mueve el jugador.
141.         if moverIzquierda and rectanguloJugador.left > 0:
142.             rectanguloJugador.move_ip(-1 * TASAMOVIMIENTOJUGADOR, 0)
143.         if moverDerecha and rectanguloJugador.right < ANCHOVENTANA:
144.             rectanguloJugador.move_ip(TASAMOVIMIENTOJUGADOR, 0)
145.         if moverArriba and rectanguloJugador.top > 0:
146.             rectanguloJugador.move_ip(0, -1 * TASAMOVIMIENTOJUGADOR)
147.         if moverAbajo and rectanguloJugador.bottom < ALTOVENTANA:
148.             rectanguloJugador.move_ip(0, TASAMOVIMIENTOJUGADOR)
149. 
150.         # Mueve el cursor del ratón hacia el jugador.
151.         pygame.mouse.set_pos(rectanguloJugador.centerx, rectanguloJugador.centery)
152. 
153.         # Mueve los villanos hacia abajo.
154.         for b in villanos:
155.             if not trucoReversa and not trucoLento:
156.                 b['rect'].move_ip(0, b['velocidad'])
157.             elif trucoReversa:
158.                 b['rect'].move_ip(0, -5)
159.             elif trucoLento:
160.                 b['rect'].move_ip(0, 1)
161. 
162.         # Elimina los villanos que han caido por debajo.
163.         for b in villanos[:]:
164.             if b['rect'].top > ALTOVENTANA:
165.                 villanos.remove(b)
166. 
167.         # Dibuja el mundo del juego en la ventana.
168.         superficieVentana.fill(COLORFONDO)
169. 
170.         # Dibuja el puntaje y el puntaje máximo
171.         dibujarTexto('Puntaje: %s' % (puntaje), fuente, superficieVentana, 10, 0)
172.         dibujarTexto('Puntaje Máximo: %s' % (puntajeMax), fuente, superficieVentana, 10, 40)
173. 
174.         # Dibuja el rectángulo del jugador
175.         superficieVentana.blit(imagenJugador, rectanguloJugador)
176. 
177.         # Dibuja cada villano
178.         for b in villanos:
179.             superficieVentana.blit(b['superficie'], b['rect'])
180. 
181.         pygame.display.update()
182. 
183.         # Verifica si algún villano impactó en el jugador.
184.         if jugadorGolpeaVillano(rectanguloJugador, villanos):
185.             if puntaje > puntajeMax:
186.                 puntajeMax = puntaje # Establece nuevo puntaje máximo
187.             break
188. 
189.         relojPrincipal.tick(FPS)
190. 
191.     # Frena el juego y muestra "Juego Terminado"
192.     pygame.mixer.music.stop()
193.     sonidoJuegoTerminado.play()
194. 
195.     dibujarTexto('Juego Terminado', fuente, superficieVentana, (ANCHOVENTANA / 3)-40, (ALTOVENTANA / 3))
196.     dibujarTexto('Presione una tecla jugar de nuevo.', fuente, superficieVentana, (ANCHOVENTANA / 3) - 150, (ALTOVENTANA / 3) + 50)
197.     pygame.display.update()
198.     esperarTeclaJugador()
199. 
200.     sonidoJuegoTerminado.stop()

Cuando ejecutes este programa, el juego se verá como en la Figura 20-1.

Figura 20-1: Una captura de pantalla modificada del juego Evasor.

Importando los módulos

  1. import pygame, random, sys
  2. from pygame.locals import *

El juego Evasor importa los mismos módulos que nuestros programas anteriores de Pygame: pygame, random, sys, y pygame.locals. El módulo pygame.locals contiene unas cuantas variables constantes que Pygame usa, tales como tipos de eventos (QUIT, KEYDOWN, etc.) y botones del teclado (K_ESCAPE, K_LEFT, etc.). Usando la sintáxis from pygame.locals import *, podemos escribir QUIT en el código fuente en lugar de pygame.locals.QUIT.

Configurando las Variables Constantes

  4. ANCHOVENTANA = 600
  5. ALTOVENTANA = 600
  6. COLORVENTANA = (255, 255, 255)
  7. COLORFONDO = (0, 0, 0)

Las variables constantes de las líneas 4 a 14 son mucho más descriptivas que lo que sería simplemente escribir sus valores. Por ejemplo, la línea superficieVentana.fill(COLORFONDO) es mucho más entendible que superficieVentana.fill((0, 0, 0)).

Puedes modificar fácilmente el juego cambiando las variables constantes. Al cambiar ANCHOVENTANA en la línea 4, automáticamente modificas el código en cualquier lugar donde se use ANCHOVENTANA. Si hubieras usado en su lugar el valor 600, tendrías que cambiar cada ocurrencia del valor 600 en el código. Es más fácil cambiar una vez valor en la constante.

  8. FPS = 40

La llamada al método relojPrincipal.tick() en la línea 189 reducirá la velocidad del juego lo suficiente para que sea jugable. Debes pasar un entero a relojPrincipal.tick() para que la función sepa cuánto tiempo debe pausar el programa. Este entero (que se almacena en FPS) es el número de cuadros por segundo en el que quieres que se ejecute el juego.

Un "cuadro" es el proceso de dibujar los gráficos en la pantalla durante una iteración del bucle del juego. Puedes establecer un valor FPS de 40, y llamar siempre a relojPrincipal.tick(FPS). Entonces puedes cambiar FPS por un valor más alto para hacer que el juego se ejecute más rápido, o por un valor más bajo para reducir la velocidad del juego.

  9. TAMAÑOMINVILLANO = 10
 10. TAMAÑOMAXVILLANO = 40
 11. VELOCIDADMINVILLANO = 1
 12. VELOCIDADMAXVILLANO = 8
 13. TASANUEVOVILLANO = 6

Las líneas 9 a 13 establecen más variables constantes que describen a los villanos que caen. El ancho y alto de los villanos estará comprendido entre TAMAÑOMINVILLANO y TAMAÑOMAXVILLANO. La velocidad a la que los villanos bajan por la pantalla estará entre VELOCIDADMINVILLANO y VELOCIDADMAXVILLANO píxeles por iteración del bucle del juego. Y un nuevo villano será agregado en la parte superior de la ventana cada TASANUEVOVILLANO iteraciones del bucle de juego.

 14. TASAMOVIMIENTOJUGADOR = 5

La TASAMOVIMIENTOJUGADOR almacenará el número de píxeles que el personaje del jugador se desplaza sobre la ventana por cada iteración del bucle de juego si es que el personaje está moviéndose. Incrementando este número puedes aumentar la velocidad a la que el jugador se mueve.

Definiendo Funciones

Hay varias funciones que crearás para el juego:

 16. def terminar():
 17.     pygame.quit()
 18.     sys.exit()

Pygame requiere que llames a pygame.quit() y sys.exit(). Coloca a ambos en una función llamada terminar(). Ahora sólo necesitas llamar a terminar(), en lugar de tener que llamar a las dos funciones pygame.quit() y sys.exit().

 20. def esperarTeclaJugador():
 21.     while True:
 22.         for evento in pygame.event.get():

En ocasiones desearás poner el juego en pausa hasta que el jugador pulse una tecla. Crea una nueva función llamada esperarTeclaJugador(). Dentro de esta función, hay un bucle infinito del que sólo se sale al recibir un evento KEYDOWN o QUIT. Al comienzo del bucle, pygame.event.get() regresa una lista de objetos Event a revisar.

 23.             if evento.type == QUIT:
 24.                 terminar()

Si el jugador cierra la ventana mientras el programa espera que el jugador pulse una tecla, Pygame generará un evento QUIT. En ese caso, la línea 24 llama a la función terminar().

 25.             if evento.type == KEYDOWN:
 26.                 if evento.key == K_ESCAPE:  # Sale del juego al presionar ESCAPE
 27.                     terminar()
 28.                 return

Si recibes un evento KEYDOWN, deberías primero comprobar si la tecla pulsada ha sido ESC. Si el jugador pulsa la tecla ESC, el programa debería terminar. Si no ha sido ese el caso, entonces la ejecución omitirá el bloque if de la línea 27 y proseguirá directamente a la sentencia return, la cual sale de la función esperarTeclaJugador().

Si no se genera ningún evento QUIT o KEYDOWN, el código continúa recorriendo el bucle. Como el bucle no hace nada, esto dará la impresión de que el juego se ha congelado hasta que el jugador pulse una tecla.

 30. def jugadorGolpeaVillano(rectanguloJugador, villanos):
 31.     for v in villanos:
 32.         if rectanguloJugador.colliderect(v['rect']):
 33.             return True
 34.     return False

La función jugadorGolpeaVillano() devolverá True si el personaje del jugador ha colisionado con uno de los villanos. El parámetro villanos es una lista de estructuras de datos "villano". Cada uno de estos diccionarios contiene una clave 'rect', y el valor correspondiente a esa clave es un objeto Rect que representa el tamaño y la ubicación del villano.

rectanguloJugador también es un objeto Rect. Los objetos Rect tienen un método llamado colliderect() que devuelve True si este objeto Rect ha colisionado con el objeto Rect que se le pasa como parámetro. En caso contrario, colliderect() devuelve False.

El bucle for de la línea 31 itera sobre cada diccionario villano en la lista. Si alguno de estos villanos colisiona con el personaje del jugador, entonces jugadorGolpeaVillano() devolverá True. Si el código consigue iterar por toda la lista de villanos en la lista sin detectar una colisión con alguno de ellos, devolverá False.

 36. def dibujarTexto(texto, fuente, superficie, x, y):
 37.     objetotexto = fuente.render(texto, 1, COLORVENTANA)
 38.     rectangulotexto = objetotexto.get_rect()
 39.     rectangulotexto.topleft = (x, y)
 40.     superficie.blit(objetotexto, rectangulotexto)

Dibujar texto en la ventana involucra varios pasos. Primero, la llamada al método render() en la línea 37 crea un objeto Surface sobre el cual se dibuja el texto con una fuente específica.

A continuación necesitas saber el tamaño y la ubicación del objeto Surface. Puedes obtener un objeto Rect con esta información a partir del método get_rect() de la clase Surface.

El objeto Rect devuelto en la línea 38 por la función get_rect() tiene una copia de la información de ancho y alto del objeto Surface. La línea 39 cambia la ubicación del objeto Rect estableciendo un nuevo valor de tupla para su atributo topleft.

Finalmente, la línea 40 dibuja el objeto Surface del texto renderizado sobre el objeto Surface que recibió como argumento la función dibujarTexto(). Mostrar texto en Pygame requiere más pasos que simplemente llamar a la función print(). Pero si encapsulas este código dentro de una sola función llamada dibujarTexto(), entonces sólo necesitas llamar a esta función para mostrar texto en la pantalla.

Iniciando Pygame y Configurando la Ventana

Ahora que las variables constantes y las funciones han sido definidas, comenzamos a llamar a las funciones de Pygame que configuran la ventana y el reloj.

 42. # establece un pygame, la ventana y el cursor del ratón
 43. pygame.init()
 44. relojPrincipal = pygame.time.Clock()

La línea 43 configura Pygame llamando a la función pygame.init(). La línea 44 crea un objeto pygame.time.Clock() y lo almacena en la variable relojPrincipal. Este objeto nos ayudará a evitar que el programa se ejecute demasiado rápido.

 45. superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTOVENTANA))

La línea 45 crea un nuevo objeto Surface el cual es utilizado por la ventana mostrada en la pantalla. Puedes especificar el ancho y la altura de este objeto Surface (y de la ventana) pasando como argumento una tupla con las variables constantes ANCHOVENTANA y ALTOVENTANA. Observa que pygame.display.set_mode() recibe sólo un argumento: una tupla. El argumento de pygame.display.set_mode() no consiste en dos enteros sino una tupla de dos enteros.

 46. pygame.display.set_caption('Esquivador')

La línea 46 establece la cadena 'Evasor' como título de la ventana. Este título aparecerá en la barra de título en la parte superior de la ventana.

 47. pygame.mouse.set_visible(False)

En Evasor, el cursor del ratón no debería ser visible. La razón de esto es que quieres usar el ratón para mover el personaje del jugador por la pantalla, pero el cursor del ratón interferiría con la imagen del personaje en la pantalla. Llamando a pygame.mouse.set_visible(False) indicamos a Pygame que el cursor no debe ser visible.

Modo Pantalla Completa

La función pygame.display.set_mode() recibe opcionalmente un segundo parámetro. Puedes pasar la constante pygame.FULLSCREEN para hacer que la ventana tome la pantalla completa en lugar de ser una ventana. Observa esta modificación en la línea 45:

 45. superficieVentana = pygame.display.set_mode((ANCHOVENTANA, ALTOVENTANA), pygame.FULLSCREEN)

El ancho y la altura de la ventana en píxeles seguirán siendo ANCHOVENTANA y ALTOVENTANA, pero la imagen se estirará hasta el tamaño de la pantalla. Prueba ejecutar el programa con y sin el modo pantalla completa.

 49. # establece las fuentes
 50. fuente = pygame.font.SysFont(None, 48)

La línea 49 crea un objeto Font a utilizar llamando a pygame.font.SysFont(). El argumento None denota la fuente por defecto del sistema. El entero 48 hace que la fuente tenga un tamaño de 48 puntos.

 52. # establece los sonidos
 53. sonidoJuegoTerminado = pygame.mixer.Sound('juegoterminado.wav')
 54. pygame.mixer.music.load('músicaDeFondo.mid')

A continuación, creamos los objetos Sound y establecemos la música de fondo. La música de fondo se reproducirá constantemente durante el juego, pero los objetos Sound se reproducirán sólo cuando el jugador pierda.

Puedes usar cualquier archivo .wav o .mid para este juego. Algunos archivos de sonido están disponibles en el sitio web de este libro en http://invpy.com/downloads. O también puedes usar tus propios archivos de sonido para este programa, siempre que los nombres de archivo sean juegoterminado.wav y músicaDeFondo.mid. (Puedes cambiar las cadenas usadas en las líneas 53 y 54 para que coincidan con los nombres de los archivos.)

La función constructor pygame.mixer.Sound() crea un nuevo objeto Sound y guarda una referencia a este objeto en la variable sonidoJuegoTerminado. Puedes crear tantos objetos Sound como quieras en tus juegos, cada uno con un archivo de sonido diferente.

La función pygame.mixer.music.load() carga un archivo de sonido para que sea reproducido como música de fondo. Esta función no devuelve ningún objeto, y sólo puede cargarse un archivo de música de fondo a la vez

 56. # establece las imagenes
 57. imagenJugador = pygame.image.load('jugador.png')
 58. rectanguloJugador = imagenJugador.get_rect()
 59. imagenVillano = pygame.image.load('villano.png')

A continuación cargaremos los archivos de imagen a utilizar para el personaje del jugador y los villanos en la pantalla. La imagen para el personaje se encuentra en jugador.png y la imagen para los villanos está en el archivo villano.png. Todos los villanos son iguales, por lo que sólo necesitarás un archivo de imagen para ellos. Puedes descargar estas imagenes del sitio web de este libro en http://invpy.com/downloads.

Mostrando la Pantalla de Inicio

Cuando el juego se inicia por primera vez, debemos mostrar el nombre "Evasor" en la pantalla. También queremos indicar al jugador que puede comenzar a jugar pulsando cualquier tecla. Esta pantalla aparece para que el jugador tenga tiempo de prepararse para empezar a jugaro luego de ejecutar el programa.

 61. # Muestra la pantalla inicial
 62. dibujarTexto('Evasor', fuente, superficieVentana, (ANCHOVENTANA / 3)+40, (ALTOVENTANA / 3))
 63. dibujarTexto('Presione una tecla para comenzar.', fuente, superficieVentana, (ANCHOVENTANA / 3) - 180, (ALTOVENTANA / 3) + 50)
 64. pygame.display.update()
 65. esperarTeclaJugador()

En las líneas 62 y 63, llamamos a la función dibujarTexto() y le pasamos cinco argumentos:

1)  La cadena del texto que quieres que aparezca en pantalla.
2)  La fuente en que quieres que aparezca la cadena.
3)  El objeto Surface sobre el cual dibujar el texto.
4)  La coordenada X del objeto Surface en la cual dibujar el texto.
5)  La coordenada Y del objeto Surface en la cual dibujar el texto.

Esto puede parecer como demasiados argumentos a pasar para una sola función, pero ten en cuenta que esta función reemplaza a cinco líneas de código cada vez que la llamamos. Esto reduce la extensión del programa y hace más fácil encontrar bugs ya que hay menos código que revisar.

La función esperarTeclaJugador() pondrá al juego en pausa ejecutando sin parar un bucle hasta que se genere un evento KEYDOWN. Entonces la ejecución sale del bucle y el programa continúa ejecutándose.

Inicio del Código Principal del Juego

 68. puntajeMax = 0
 69. while True:

El valor en la variable puntajeMax comienza siendo 0 cuando el programa se ejecuta por primera vez. Cada vez que el jugador pierde y su puntaje es mayor que el puntaje máximo actual, el puntaje máximo es reemplazado por este puntaje mayor.

El bucle infinito que comienza en la línea 69 no es técnicamente el "bucle del juego". El bucle del juego gestiona los eventos y dibujar la ventana mientras el juego está ejecutándose. En cambio, este bucle while sumará una iteración cada vez que el jugador comience un nuevo juego. Cuando el jugador pierda y el juego se reinicie, la ejecución del programa volverá a la línea 69.

 70.     # establece el comienzo del juego
 71.     villanos = []
 72.     puntaje = 0

Al comienzo, quieres que villanos sea una lista vacía. La variable villanos es una list de objetos diccionario con las siguientes claves:

• 'rect' - El objeto Rect que describe la posición y el tamaño del villano.
• 'velocidad' - Qué tan rápido los villanos caen por la pantalla. Este entero representa píxeles por iteración del bucle del juego.
• 'superficie' - El objeto Surface que tiene dibujada la imagen estirada del villano. Este es el objeto Surface que se dibuja sobre el objeto Surface devuelto por pygame.display.set_mode().

La línea 72 reinicia el puntaje del jugador a 0.

 73.     rectanguloJugador.topleft = (ANCHOVENTANA / 2, ALTOVENTANA - 50)

La ubicación inicial del jugador es en el centro de la pantalla y 50 píxeles arriba del borde inferior. El primer elemento en la tupla de la línea 73 es la coordenada X de su borde izquierdo. El segundo elemento es la coordenada Y de su borde superior.

 74.     moverIzquierda = moverDerecha = moverArriba = moverAbajo = False
 75.     trucoReversa = trucoLento = False
 76.     contadorAgregarVillano = 0

Se asigna False a las variables de movimiento moverIzquierda, moverDerecha, moverArriba y moverAbajo. Tamién se asigna falso a las variables trucoReversa y trucoLento. Estas últimas recibirán el valor True sólo cuando el jugador active estos trucos manteniendo presionadas las teclas "z" y "x", respectivamente.

La variable contadorAgregarVillano es un contador para indicar al programa cuándo añadir un nuevo villano en el borde superior de la pantalla. El valor en contadorAgregarVillano se incrementa en uno cada vez que el bucle del juego itera.

Cuando contadorAgregarVillano es igual a TASANUEVOVILLANO, el la variable contadorAgregarVillano se reinicia a 0 y se agrega un nuevo villano al borde superior de la pantalla. (Esta comprobación se realiza más adelante en la línea 130.)

 77.     pygame.mixer.music.play(-1, 0.0)

La música de fondo comienza a reproducirse en la línea 77 con una llamada a pygame.mixer.music.play(). El primer argumento es el número de veces que la música se repetirá. -1 es un valor especial que indica a Pygame que quieres que la música se repita sin parar.

El segundo argumento es un float que dice a partir de cuántos segundos quieres que comience a reproducirse la música. Al pasar 0.0 determinamos que la música comience a reproducirse desde el principio.

El Bucle del Juego

El código del bucle del juego actualiza constantemente el estado del universo del juego cambiando la posición del jugador y de los villanos, gestionando eventos generados por Pygame, y dibujando el universo del juego en la pantalla. Todo esto ocurre varias docenas de veces por segundo, lo que hace que se vea en "tiempo real".

 79.     while True: # el ciclo del juego se mantiene mientras se este jugando
 80.         puntaje += 1 # incrementa el puntaje

La línea 79 es el inicio del principal bucle del juego. La línea 80 incrementa el puntaje del jugador en cada iteración del bucle del juego. Cuanto más tiempo permanezca el jugador sin perder, mayor será su puntaje. La ejecución sólo saldrá del bucle cuando el jugador pierda o salga del programa.

Gestión de Eventos

Hay cuatro tipos diferentes de eventos que el programa gestionará: QUIT, KEYDOWN, KEYUP, y MOUSEMOTION.

 82.         for evento in pygame.event.get():
 83.             if evento.type == QUIT:
 84.                 terminar()

La línea 82 es el comienzo del código de gestión de eventos. Llama a pygame.event.get(), la cual devuelve una lista de todos los objetos Event. Cada objeto Event representa un evento que ha ocurrido desde la última llamada a pygame.event.get(). El código comprobará el atributo type del objeto Event para ver de qué tipo de evento se trata y operar con él de forma acorde.

Si el atributo type del objeto Event es igual a QUIT, significa que el usuario ha cerrado el programa. La variable constante QUIT se importa del módulo pygame.locals.

 86.             if evento.type == KEYDOWN:
 87.                 if evento.key == ord('z'):
 88.                     trucoReversa = True
 89.                 if evento.key == ord('x'):
 90.                     trucoLento = True

Si el tipo de evento es KEYDOWN, el jugador ha pulsado una tecla. El objeto Event para eventos del teclado tiene un atributo key que corresponde al valor ordinal entero de la tecla pulsada. La función ord() devuelve el valor ordinal de la letra pasada como argumento.

Por ejemplo, la línea 87 comprueba si el evento corresponde a la tecla "z" mediante event.key == ord('z'). Si esta condición es True, se asigna True a trucoReversa para indicar que este truco ha sido activado. La línea 89 comprueba si la tecla "x" ha sido pulsada para activar el truco lento.

Los eventos de teclado de Pygame siempre usan los valores ordinales de teclas minúsculas, no mayúsculas. Siempre se usa event.key == ord('z') en lugar de event.key == ord('Z'). De otra forma, el programa no registrará que la tecla ha sido pulsada.

 91.                 if evento.key == K_LEFT or evento.key == ord('a'):
 92.                     moverDerecha = False
 93.                     moverIzquierda = True
 94.                 if evento.key == K_RIGHT or evento.key == ord('d'):
 95.                     moverIzquierda = False
 96.                     moverDerecha = True
 97.                 if evento.key == K_UP or evento.key == ord('w'):
 98.                     moverAbajo = False
 99.                     moverArriba = True
100.                 if evento.key == K_DOWN or evento.key == ord('s'):
101.                     moverArriba = False
102.                     moverAbajo = True

Las líneas 91 a 102 comprueban si el evento ha sido generado por el jugador presionando una de las flechas del teclado o las teclas WASD. No hay valores ordinales para cada botón del teclado, como las flechas de dirección o la tecla ESC. El módulo pygame.locals provee variables constantes para usar en lugar de ordinales.

La línea 91 comprueba si el jugador ha pulsado la flecha izquierda con el evento event.key == K_LEFT. Observa que pulsar una flecha del teclado no sólo asigna True a una variable de movimiento, sino que además asigna False a la variable de movimiento en la dirección opuesta.

Por ejemplo, si se pulsa la flecha izquierda, el código en la línea 93 asigna True a moverIzquierda, pero también asigna False a moverDerecha. Esto previene que el programa se confunda y piense que el personaje del jugador debe moverse en dos direcciones opuestas a la vez.

La Tabla 20-1 lista variables constantes de uso común para el atributo key de los objetos Event relacionados al teclado.

Tabla 20-1: Variables Constantes para teclas comunes
Variable Constante Pygame  Tecla    Variable Constante Pygame  Tecla
K_LEFT  Flecha izquierda    K_HOME  Inicio
K_RIGHT Flecha derecha   K_END Fin
K_UP  Flecha arriba    K_PAGEUP  Re pág
K_DOWN  Flecha abajo    K_PAGEDOWN  Av pág
K_ESCAPE  Esc   K_F1  F1
K_BACKSPACE Retroceso   K_F2  F2
K_TAB Tab   K_F3  F3
K_RETURN  Intro o Enter   K_F4  F4
K_SPACE Barra espaciadora   K_F5  F5
K_DELETE  Supr   K_F6  F6
K_LSHIFT  Shift izquierda    K_F7  F7
K_RSHIFT  Shift derecha   K_F8  F8
K_LCTRL Ctrl izquierda   K_F9  F9
K_RCTRL Ctrl derecha    K_F10 F10
K_LALT  Alt izquierda    K_F11 F11
K_RALT  Alt derecha   K_F12 F12

104.             if evento.type == KEYUP:
105.                 if evento.key == ord('z'):
106.                     trucoReversa = False
107.                     puntaje = 0
108.                 if evento.key == ord('x'):
109.                     trucoLento = False
110.                     puntaje = 0

El evento KEYUP se crea cuando el jugador libera una tecla que estaba pulsando. Los objetos Event de tipo KEYUP también tienen un atributo key, igual que los eventos KEYDOWN.

La línea 105 comprueba si el jugador ha liberado la tecla "z", lo que desactivará el truco reversa. En ese caso, la línea 106 asignaFalse a trucoReversa y la línea 107 reinicia el puntaje a 0. Reiniciamos el puntaje para desalentar al jugador de usar los trucos.

Las líneas 108 a 110 hacen lo mismo para la tecla "x" y el truco lento. Cuando la tecla "x" es liberada, se asigna False a trucoLento y el puntaje del jugador se reinicia a 0.

111.                 if evento.key == K_ESCAPE:
112.                         terminar()

En cualquier momento del juego, el jugador puede pulsar la tecla ESC para salir del juego. La línea 111 comprueba si la tecla liberada ha sido ESC evaluando evento.key == K_ESCAPE. En ese caso, la línea 112 llama a la función terminar() para salir del programa.

114.                 if evento.key == K_LEFT or evento.key == ord('a'):
115.                     moverIzquierda = False
116.                 if evento.key == K_RIGHT or evento.key == ord('d'):
117.                     moverDerecha = False
118.                 if evento.key == K_UP or evento.key == ord('w'):
119.                     moverArriba = False
120.                 if evento.key == K_DOWN or evento.key == ord('s'):
121.                     moverAbajo = False

Las líneas 114 a 121 comprueban si el jugador ha liberado una flecha o alguna de las teclas WASD. En ese caso, el código asigna False a la variable de movimiento correspondiente.

For example, if the player was holding down the left arrow key, then the moveLeft would have been set to True on line 93. When they release it, the condition on line 114 will evaluate to True, and the moveLeft variable will be set to False.

The move_ip() Method

123.             if evento.type == MOUSEMOTION:
124.                 # Si se mueve el ratón, este se mueve al lugar donde esté el cursor.
125.                 rectanguloJugador.move_ip(evento.pos[0] - rectanguloJugador.centerx, evento.pos[1] - rectanguloJugador.centery)

Now that you’ve handled the keyboard events, let’s handle any mouse events that may have been generated. The Dodger game doesn’t do anything if the player has clicked a mouse button, but it does respond when the player moves the mouse. This gives the player two ways of controlling the player character in the game: the keyboard or the mouse.

The MOUSEMOTION event is generated whenever the mouse is moved. Event objects with a type set to MOUSEMOTION also have an attribute named pos for the position of the mouse event. The pos attribute stores a tuple of the X- and Y-coordinates of where the mouse cursor moved in the window. If the event’s type is MOUSEMOTION, the player’s character moves to the position of the mouse cursor.

The move_ip() method for Rect objects will move the location of the Rect object horizontally or vertically by a number of pixels. For example, playerRect.move_ip(10, 20) would move the Rect object 10 pixels to the right and 20 pixels down. To move the Rect object left or up, pass negative values. For example, playerRect.move_ip(-5, -15) will move the Rect object left by 5 pixels and up 15 pixels.

The “ip” at the end of move_ip() stands for “in place”. This is because the method changes the Rect object itself, rather than return a new Rect object with the changes. There is also a move() method which doesn’t change the Rect object, but instead creates and returns a new Rect object in the new location.

Adding New Baddies

127.         # Añade villanos en la parte superior de la pantalla, de ser necesarios.
128.         if not trucoReversa and not trucoLento:
129.             contadorAgregarVillano += 1

On each iteration of the game loop, increment the baddieAddCounter variable by one. This only happens if the cheats are not enabled. Remember that reverseCheat and slowCheat are set to True as long as the “z” and “x” keys are being held down, respectively

And while those keys are being held down, baddieAddCounter isn’t incremented. Therefore, no new baddies will appear at the top of the screen.

130.         if contadorAgregarVillano == TASANUEVOVILLANO:
131.             contadorAgregarVillano = 0
132.             tamañoVillano = random.randint(TAMAÑOMINVILLANO, TAMAÑOMAXVILLANO)
133.             nuevoVillano = {'rect': pygame.Rect(random.randint(0, ANCHOVENTANA-tamañoVillano), 0 - tamañoVillano, tamañoVillano, tamañoVillano),
134.                         'velocidad': random.randint(VELOCIDADMINVILLANO, VELOCIDADMAXVILLANO),
135.                         'superficie':pygame.transform.scale(imagenVillano, (tamañoVillano, tamañoVillano)),
136.                         }

When the baddieAddCounter reaches the value in ADDNEWBADDIERATE, it is time to add a new baddie to the top of the screen. First, the baddieAddCounter counter is reset back to 0.

Line 132 generates a size for the baddie in pixels. The size will be a random integer between BADDIEMINSIZE and BADDIEMAXSIZE, which are constants set to 10 and 40 on lines 9 and 10.

Line 133 is where a new baddie data structure is created. Remember, the data structure for baddies is simply a dictionary with keys 'rect', 'velocidad', and 'superficie'. The 'rect' key holds a reference to a Rect object which stores the location and size of the baddie. The call to the pygame.Rect() constructor function has four parameters: the X-coordinate of the top edge of the area, the Y-coordinate of the left edge of the area, the width in pixels, and the height in pixels.

The baddie needs to appear randomly across the top of the window, so pass random.randint(0, WINDOWWIDTH-baddieSize) for the X-coordinate of the left edge. The reason you pass WINDOWWIDTH-baddieSize instead of WINDOWWIDTH is because this value is for the left edge of the baddie. If the left edge of the baddie is too far on the right side of the screen, then part of the baddie will be off the edge of the window and not visible.

The bottom edge of the baddie should be just above the top edge of the window. The Y-coordinate of the top edge of the window is 0. To put the baddie’s bottom edge there, set the top edge to 0 - baddieSize.

The baddie’s width and height should be the same (the image is a square), so pass baddieSize for the third and fourth argument.

The rate of speed that the baddie moves down the screen is set in the 'velocidad' key. Set it to a random integer between BADDIEMINSPEED and BADDIEMAXSPEED.

138.             villanos.append(nuevoVillano)

Line 138 will add the newly created baddie data structure to the list of baddie data structures. The program will use this list to check if the player has collided with any of the baddies, and to know where to draw baddies on the window.

Moving the Player’s Character

140.         # Mueve el jugador.
141.         if moverIzquierda and rectanguloJugador.left > 0:
142.             rectanguloJugador.move_ip(-1 * TASAMOVIMIENTOJUGADOR, 0)

The four movement variables moveLeft, moveRight, moveUp and moveDown are set to True and False when Pygame generates the KEYDOWN and KEYUP events, respectively.

If the player’s character is moving left and the left edge of the player’s character is greater than 0 (which is the left edge of the window), then playerRect should be moved to the left.

You’ll always move the playerRect object by the number of pixels in PLAYERMOVERATE. To get the negative form of an integer, multiple it by -1. On line 142, since 5 is stored in PLAYERMOVERATE, the expression -1 * PLAYERMOVERATE evaluates to -5.

Therefore, calling playerRect.move_ip(-1 * PLAYERMOVERATE, 0) will change the location of playerRect by 5 pixels to the left of its current location.

143.         if moverDerecha and rectanguloJugador.right < ANCHOVENTANA:
144.             rectanguloJugador.move_ip(TASAMOVIMIENTOJUGADOR, 0)
145.         if moverArriba and rectanguloJugador.top > 0:
146.             rectanguloJugador.move_ip(0, -1 * TASAMOVIMIENTOJUGADOR)
147.         if moverAbajo and rectanguloJugador.bottom < ALTOVENTANA:
148.             rectanguloJugador.move_ip(0, TASAMOVIMIENTOJUGADOR)

Lines 143 to 148 do the same thing for the other three directions: right, up, and down. Each of the three if statements in lines 143 to 148 checks that their movement variable is set to True and that the edge of the Rect object of the player is inside the window. Then it calls move_ip() to move the Rect object.

The pygame.mouse.set_pos() Function

150.         # Mueve el cursor del ratón hacia el jugador.
151.         pygame.mouse.set_pos(rectanguloJugador.centerx, rectanguloJugador.centery)

Line 151 moves the mouse cursor to the same position as the player’s character. The pygame.mouse.set_pos() function moves the mouse cursor to the X- and Y-coordinates you pass it. This is so that the mouse cursor and player’s character are always in the same place.

Specifically, the cursor will be right in the middle of the character’s Rect object because you passed the centerx and centery attributes of playerRect for the coordinates. The mouse cursor still exists and can be moved, even though it is invisible because of the pygame.mouse.set_visible(False) call on line 47.

153.         # Mueve los villanos hacia abajo.
154.         for b in villanos:

Now loop through each baddie data structure in the baddies list to move them down a little.

155.             if not trucoReversa and not trucoLento:
156.                 b['rect'].move_ip(0, b['velocidad'])

If neither of the cheats have been activated, then move the baddie’s location down a number of pixels equal to its speed, which is stored in the 'velocidad' key.

Implementing the Cheat Codes

157.             elif trucoReversa:
158.                 b['rect'].move_ip(0, -5)

If the reverse cheat is activated, then the baddie should move up by five pixels. Passing -5 for the second argument to move_ip() will move the Rect object upwards by five pixels.

159.             elif trucoLento:
160.                 b['rect'].move_ip(0, 1)

If the slow cheat has been activated, then the baddie should move downwards, but only by the slow speed of one pixel per iteration through the game loop. The baddie’s normal speed (which is stored in the 'velocidad' key of the baddie’s data structure) is ignored while the slow cheat is activated.

Removing the Baddies

162.         # Elimina los villanos que han caido por debajo.
163.         for b in villanos[:]:

Any baddies that fell below the bottom edge of the window should be removed from the baddies list. Remember that while iterating through a list, do not modify the contents of the list by adding or removing items. So instead of iterating through the baddies list with the for loop, iterate through a copy of the baddies list. This copy is made with the blank slicing operator [:].

The for loop on line 163 uses a variable b for the current item in the iteration through baddies[:].

164.             if b['rect'].top > ALTOVENTANA:
165.                 villanos.remove(b)

Let’s evaluate the expression b['rect'].top. b is the current baddie data structure from the baddies[:] list. Each baddie data structure in the list is a dictionary with a 'rect' key, which stores a Rect object. So b['rect'] is the Rect object for the baddie.

Finally, the top attribute is the Y-coordinate of the top edge of the rectangular area. Remember that the Y-coordinates increase going down. So b['rect'].top > WINDOWHEIGHT will check if the top edge of the baddie is below the bottom of the window.

If this condition is True, then line 165 removes the baddie data structure from the baddies list.

Drawing the Window

After all the data structures have been updated, the game world should be drawn using Pygame’s image functions. Because the game loop is executed several times a second, drawing the baddies and player in new positions makes their movement look smooth and natural.

167.         # Dibuja el mundo del juego en la ventana.
168.         superficieVentana.fill(COLORFONDO)

First, before drawing anything else, line 168 blacks out the entire screen to erase anything drawn on it previously.

Remember that the Surface object in windowSurface is the special Surface object because it was the one returned by pygame.display.set_mode(). Therefore, anything drawn on that Surface object will appear on the screen after pygame.display.update() is called.

Drawing the Player’s Score

170.         # Dibuja el puntaje y el puntaje máximo
171.         dibujarTexto('Puntaje: %s' % (puntaje), fuente, superficieVentana, 10, 0)
172.         dibujarTexto('Puntaje Máximo: %s' % (puntajeMax), fuente, superficieVentana, 10, 40)

Lines 171 and 172 render the text for the score and top score to the top left corner of the window. The 'Score: %s' % (score) expression uses string interpolation to insert the value in the score variable into the string.

Pass this string, the Font object stored in the font variable, the Surface object on which to draw the text on, and the X- and Y-coordinates of where the text should be placed. The drawText() will handle the call to the render() and blit() methods.

For the top score, do the same thing. Pass 40 for the Y-coordinate instead of 0 so that the top score text appears beneath the score text.

Drawing the Player’s Character

174.         # Dibuja el rectángulo del jugador
175.         superficieVentana.blit(imagenJugador, rectanguloJugador)

The information about the player is kept in two different variables. playerImage is a Surface object that contains all the colored pixels that make up the player’s character’s image. playerRect is a Rect object that stores the information about the size and location of the player’s character.

The blit() method draws the player character’s image (in playerImage) on windowSurface at the location in playerRect.

177.         # Dibuja cada villano
178.         for b in villanos:
179.             superficieVentana.blit(b['superficie'], b['rect'])

Line 178’s for loop draws every baddie on the windowSurface object. Each item in the baddies list is a dictionary. The dictionaries’ 'superficie' and 'rect' keys contain the Surface object with the baddie image and the Rect object with the position and size information, respectively.

181.         pygame.display.update()

Now that everything has been drawn to windowSurface, draw this Surface object to the screen by calling pygame.display.update().

Collision Detection

183.         # Verifica si algún villano impactó en el jugador.
184.         if jugadorGolpeaVillano(rectanguloJugador, villanos):
185.             if puntaje > puntajeMax:
186.                 puntajeMax = puntaje # Establece nuevo puntaje máximo
187.             break

Lines 184 checks if the player has collided with any baddies by calling playerHasHitBaddie(). This function will return True if the player’s character has collided with any of the baddies in the baddies list. Otherwise, the function will return False.

If the player’s character has hit a baddie, lines 185 and 186 update the top score if the current score is greater than it. Then the execution breaks out of the game loop at line 187. The program’s execution will move to line 191.

189.         relojPrincipal.tick(FPS)

To keep the computer from running through the game loop as fast as possible (which would be much too fast for the player to keep up with), call relojPrincipal.tick() to pause for a brief amount of time. The pause will be long enough to ensure that about 40 (the value stored inside the FPS variable) iterations through the game loop occur each second.

The Game Over Screen

191.     # Frena el juego y muestra "Juego Terminado"
192.     pygame.mixer.music.stop()
193.     sonidoJuegoTerminado.play()

When the player loses, the game stops playing the background music and plays the “game over” sound effect. Line 192 calls the stop() function in the pygame.mixer.music module to stop the background music. Line 193 calls the play() method on the Sound object stored  sonidoJuegoTerminado. Puedes crear tantos objetos Sound como quieras en tus juegos, cada uno con un archivo de sonido diferente.i pygame.mixer.music.load() carga un archivo de sonido para que sea reproducido como música de fondo. Esta función no devuelve ningún objeto, y sólo puede cargarse un archivo de música de fondo a la vez
196.     dibujarTexto('Presione una tecla jugar de nuevo.', fuente, superficieVentana, (ANCHOVENTANA / 3) - 150, (ALTOVENTANA / 3) + 50)
197.     pygame.display.update()
198.     esperarTeclaJugador()


A continuación cargaremos los archivos de imagen a utilizar para el personaje del jugador y los villanos en la pantalla. La imagen para el personaje se encuentra en jugador.png y laLines 195 and 196 call the drawText() function to draw the “game over” text to the  imagen para los villanos está en el archivo villano.png. Todos los villanos son iguales, por lo que sólo necesitarás un archivo de imagen para ellos. Puedes descargar estas imagenes del sitio web de este libro en htwindowSurface object. Line 197 calls pygame.display.update() to draw this Surface object to the screen. After displaying this text, the game stops until the player presses a key by calling the waitForPlayerToPressKey() functionline 198. Depending on.

Cuando el juego se inicia por primera vez, se muestra el nombre "Evasor" en la debemos mostrar Pantalla de Inicioh  ct before a . queremos indicar al jugador que puede comenzar a jugar pulsando cualquier tecla. Esta pantalla aparece para que el jugador tenga tiempo de prepararse para empezar a jugaro luego de ejecutar el programa.T
Modifying the Dodger Game

That’s it for our graphical game. You may find that the game is too easy or too hard. But the game is easy to modify because we took the time to use constant variables instead of typing in the values directly. Now all we need to do to change the game is modify the value set in the constant variables.

For example, if you want the game to run slower in general, change the FPSEn las líneas 62 y 63, llamamos a la función dibujarTexto() y le pasamos cinco argumentos:game loop will only be executed 20 times a second instead of 40.

If yLa cadena del texto que quieres que aparezca en pantalla BADDIEMAXSPEED to a smaller value such as 4. This will make all the baddies move bLa fuente en que quieres que aparezca la cadenapixels per iteration through the game loop instead of 1 and 8.

El objeto Surface sobrY el cual dibujar el textou wantLa coordenada X del objeto Surface en la cual dibujar el texto have fewer but la  La coordenada X del
Esto puede parecer como demasiados argumentos a pasar para una sola función, pero ten en cuenta que esta función reemplaza a cinco líneas de código cada vez que la llamamos. Esto reduce la extensión del programa y hace más fácil encontrar bugs ya que hay menos código que revisar. objeto Surface en la cual dibujar el texto.that baddies are being added every 12 iterations through the game l
La función
While the ba to u pondrá al juego en pausa ejecutando sin parar un bucle hasta que se genere un evento KEYDOWN. Entonces la ejecución sale del bucle y el programa continúa ejecutándose.s
Inicio del Código Principal del Juego
Summary

Unlike our previous text-based games, Dodger really looks like the kind of modern computer game we usually play. It has graphics and 
El valor en la variable music and uses the mouse. While Pygame provides functions and data types as building blocks, it is you the them programmer who puts them together to create fun, interactive games.

And it is all because you know how to instruct the computer to do it, step by step, line by line. You can speak the computer’s language, and get it to do large amounts of number crunching and drawing for you. This is a useful skill, and I hope you’ll continue to learn more about Python programming. (And there’s still much more to learn!)

Here are several websites that can teach you more about programming Python:

• http://reddit.com/r/inventwithpython – This site has several users who could help you with the material in this book.
• http://inventwithpython.com - This book’s website, which includes all the source code for these programs and additional information. This site also has the image and sound files used in the Pygame programs.
• http://inventwithpython.com/pygame – My second book, Making Games with Python & Pygame, which covers Pygame in more detail. It’s free to download and has the source code for many more games.
• http://inventwithpython.com/hacking – My third book, Hacking Secret Ciphers with Python, which covers more cryptography and code breaking programs. It’s also free to download.
• http://inventwithpython.com/automate – My fourth book, Automate the Boring Stuff with Python, which teaches you practical programming skills. It’s also free to download.
• http://python.org/doc/ - More Python tutorials and the documentation of all the Python modules and functions.
• http://pygame.org/docs/ - Complete documentation on the modules and functions for Pygame.
• al@inventwithpython.com - My email address. Feel free to email me your questions about this book or about Python programming.

Or you can find out more about Python by searching the web. Go to http://google.com and search for “Python programming” or “Python tutorials” to find websites that can teach you more about Python programming.

Now get going and invent your own games. And good luck!
