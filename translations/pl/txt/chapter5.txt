    Rozdział 5
    ŻARCIKI

Tematy omówione w tym rozdziale:

•   Użycie słowa kluczowego end jako argumentu print(), by nie robić nowych linii
•   Znaki cytowania
•   Użycie pojedynczych i podwójnych apostrofów dla napisów

Więcej o funkcji print()

Większość gier w tej książce używa prostych napisów jako danych wejściowych i wyjściowych. Dane wejściowe są wpisywane przez użytkownika na klawiaturze. Dane wyjściowe są wyświetlane na monitorze. W Pythonie do wyświetlania danych tekstowych używana jest funkcja print(). Ale jest jeszcze trochę rzeczy do poznania w zakresie tego jak w Pythonie działają napisy i funkcja print().

Ten rozdział opowie użytkownikowi kilka żarcików.

Przykładowe uruchomienie Żarcików

Co kłótliwy człowiek robi w pralce?
Spiera się.
Co powiedział chemik jak zjadł zimny brom??
Chemik powiedział 'Br'!
Puk, puk.
Kto tam?
Przerywająca krowa.
Przerywająca krowa? O co-Muu!

Kody źródłowe żarcików (jokes.py)

Wpisz następujący kod w edytorze tekstowym i zapisz to jako jokes.py.

WAŻNE! Programy w tej książce uruchamiają się tylko z Pythonem 3, a nie z Pythonem 2. Kiedy uruchomi się okno IDLE, to w belce tytułowej pojawi się napis w stylu “Python 3.4.0”. Jeśli masz zainstalowanego Pythona 2, to możesz także zainstalować Pythona 3. Aby go pobrać odwiedź https://python.org/download/.

Jeśli po wpisaniu tych kodów dostaniesz komunikaty o błędach, to porównaj to z kodem z książki za pomocą narzędzia pokazującego różnice na stronie http://invpy.com/diff/jokes.

jokes.py

 1. print('Co kłótliwy człowiek robi w pralce?')
 2. input()
 3. print('Spiera się.')
 4. print()
 5. print('Co powiedział chemik jak zjadł zimny brom??')
 6. input()
 7. print('Chemik powiedział \'Br\'!')
 8. print()
 9. print('Puk, puk.')
10. input()
11. print("Kto tam?")
12. input()
13. print('Przerywająca krowa.')
14. input()
15. print('Przerywająca krowa? O co', end='')
16. print('-Muu!')

Nie martw się jeśli nie rozumiesz całego kodu. Po prostu zapisz i uruchom program. Pamiętaj, że jeśli twój program ma błędy, to możesz użyć narzędzia do porównywania kodu ze strony http://invpy.com/chap5.

Jak ten kod działa

 1. print('Co kłótliwy człowiek robi w pralce?')
 2. input()
 3. print('Spiera się.')
 4. print()

Linie od 1 do 4 trzykrotnie wywołują funkcję print(). Nie chcesz, by gracz od razu poznał odpowiedź na żartobliwe pytania, więc po pierwszym print() jest wywołanie funkcji input(). Gracz może odczytać pierwszą linię, nacisnąć Enter i odczytać odpowiedź.

Użytkownik nadal może wpisać coś i nacisnąć Enter, ale zwrócony napis nie jest zapisywany do żadnej zmiennej. Program po prostu o tym zapomni i przejdzie do kolejnej linii kodu.

Ostatnie wywołanie funkcji print() nie ma żadnego argumentu. To oznacza, by program wypisał pustą linię. Puste linie są przydatne by napisy nie zlewały się na ekranie.

Znaki cytowania

 5. print('Co powiedział chemik jak zjadł zimny brom??')
 6. input()
 7. print('Chemik powiedział \'Br\'!')
 8. print()

W drugim wywołaniu print() znajdziemy znak odwróconego ukośnika (ang. backslash) przez znakiem oznaczającym początek napisu (to jest pojedynczego apostrofu). Zwróć uwagę, że \ jest odwróconym ukośnikiem, a / jest ukośnikiem (ang. forward slash). Odrócony ukośnik oznacza, że litera za nim jest znakiem cytowania (ang. escape character). Znak cytowania pozwala wypisywać znaki które są trudne do wpowadzenia w kodach źródłowych. W tym wywołaniu print() znakiem cytowania jest pojedynczy apostrof.

Znak cytowania (odwróconyo ukośnik) przed znakiem pojedynczego apostrofu jest, by Python nie traktował pojedynczego apostrofu jako zakończenia napisu. Ten apostrof jest częścią napisu. Zacytowany pojedynczy apostrof mówi Pythonowi by ten apostrof potraktować dosłownie jako część nappisu, a nie oznaczenie końca wartości napisowej.

Inne znaki cytowania

Co zrobić jeśli chcesz wyświetlić odwrócony ukośnik? Ta linia kody nie zadziała:

>>> print('Odleciał zielono\turkusowym śmigłowcem.')

Te wywołanie funkcji print() function powinno dać:

Odleciał zielono    urkusowym śmigłowcem.

Dzieje się tak ponieważ “t” w “turkusowym” zostało potraktowane jako znak cytowania, ponieważ było poprzedzone odwróconym ukosnikiem. Cytowany znak t symuluje naciśnięcie klawisza Tab na twojej klawiaturze. Cytowanie jest tu potrzebne, gdyż w napisach są znaki jakich nie można wprowadzić z klawiatury.

Zamiast tego spróbuj z linią:

>>> print('Odleciał zielono\\turkusowym śmigłowcem.')
Odleciał zielono\turkusowym śmigłowcem.

Tabela 5-1 pokazuje listę znaków cytowania w Pythonie.

Table 5-1: Znaki cytowania
Znak cytowania          Co zostanie wypisane
\\                      Odwrócony apostrof (\)
\'                      Pojedynczy apostrof (')
\"                      Podwójny apostrof (")
\n                      Nowa linia
\t                      Tabulacja



Pojedyncze i podwójne apostrofy

Strings don’t always have to be in between single quotes in Python. You can also put them in between double quotes. These two lines print the same thing:

>>> print('Hello world')
Hello world
>>> print("Hello world")
Hello world

But you cannot mix quotes. This line will give you an error if you try to use them:

>>> print('Hello world")
SyntaxError: EOL while scanning single-quoted string

I like to use single quotes so I don’t have to hold down the shift key to type them. It’s easier to type, and Python doesn’t care either way.

Just like you need the escape character \' to have a single quote in a string surrounded by single quotes, you need the escape character \" to have a double quote in a string surrounded by double quotes. For example, look at these two lines:

>>> print('I asked to borrow Abe\'s car for a week. He said, "Sure."')

I asked to borrow Abe's car for a week. He said, "Sure."

>>> print("He said, \"I can’t believe you let him borrow your car.\"")

He said, "I can’t believe you let him borrow your car."

In the single quote strings you don’t need to escape double quotes, and in the double quote strings you don’t need to escape single quotes. The Python interpreter is smart enough to know that if a string starts with one type of quote, the other type of quote doesn’t mean the string is ending.

The end Keyword Argument

 9. print('Knock knock.')
10. input()
11. print("Who's there?")
12. input()
13. print('Interrupting cow.')
14. input()
15. print('Interrupting cow wh', end='')
16. print('-MOO!')

Did you notice the second parameter on line 15's print()? Normally, print() adds a newline character to the end of the string it prints. This is why a blank print() function will just print a newline. But the print() function can optionally have a second parameter (which has the name “end”.)

The blank string passed is called a keyword argument. The end parameter has a specific name, and to pass an argument to this specific parameter you must type end=.

By passing a blank string for the end, the print() function won’t add a newline at the end of the string, but instead add a blank string. This is why '-MOO!' appears next to the previous line, instead of on its own new line. There was no newline after the 'Interrupting cow wh' string.

Summary

This chapter explores the different ways you can use the print() function. Escape characters are used for characters that are difficult or impossible to type into the code with the keyboard. Escape characters are typed into strings beginning with a backslash \ followed by a single letter for the escape character. For example, \n would be a newline. To include a backslash in a string, you would use the escape character \\.

The print() function automatically appends a newline character to the end of the string passed it to be displayed on the screen. Most of the time, this is a helpful shortcut. But sometimes you don’t want a newline character at the end. To change this, you can pass the end keyword argument with a blank string. For example, to print “spam” to the screen without a newline character, you would call print('spam', end='').

By adding this level of control to the text displayed on the screen, you can be more flexible ways in how you display text on the screen

