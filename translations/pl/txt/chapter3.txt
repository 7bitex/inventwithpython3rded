    Rozdział 3

    Pisanie programów

Tematy omówione w tym rozdziale:

•   Przepływ sterowania
•   Napisy
•   Łączenie napisów
•   Typy danych (takie jak napisy, lub liczby całkowite)
•   Użycie IDLE do pisania kodów źródłowych
•   Zapisywanie i uruchamianie programów w IDLE
•   Funkcja print()
•   Funkcja input()
•   Komentarze
•   Nazywanie zmiennych
•   Rozróżnianie wielkości liter

Na razie wystarczy już matematyki. Python to coś więcej, niż kalkulator. Zobaczmy co Python może zrobić z tekstem. W tym rozdziale nauczysz suę jak zachować napis w zmiennej, łączyć napisy i wyświetlać je na ekranie. Prawie wszystkie programy wyświetlają napisy użytkownikowo, a użytkownik wprowadza napisy do twojego programu przez klawiaturę. Stworzysz także swój pierwszy program. Ten program wyświetli powitanie: “Witaj świecie!” i spyta o twoje imię.

Napisy

W Pythonie wartości tekstowe są nazywane napisami, lub łańcuchami (ang: string). Napisy moga być używane podobnie do liczb całkowitych, lub zmiennoprzecinkowych. Możesz zapisywać je w zmiennych. W kodzie napist rozpoczynają się i kończą pojedynczym znakiem cudzysłowia ('). Spróbuj wpisać ten kod w powłoce:

>>> spam = 'witaj'

Pojedyncze cudzysłowia mówią Pythonowi gdzie napis się zaczyna i kończy. Nie są one częścią napisu. Gdy już wprowadziłeś spam w powłoce możesz zobaczyć zawartość zmiennej spam (napis 'witaj'). Pamiętaj, że Python wylicza zmienne do wartości, jaką zapisze w zmiennej. W tym wypadki jest to napis 'witaj':

>>> spam = 'witaj'
>>> spam
'witaj'

Napisy mogą zawierać dowolny znak z klawiatury. Tu są przykłady napisów:

'witaj'
'Jak się masz!'
'KOCIAKI'
'7 jabłek, 14 pomarańczy, 3 cytryny'
'W sławnym mieście Pacanowie tacy sprytni są kowale.'
'Dawno, dawno temu w odległej galaktyce...'
'O*&#wY%*&OCfsdYO*&gfC%YO*&%3yc8r2'

Napisy można łączyć za pomocą operatorów by tworzyć wyrażenia, podobnie jak było to z liczbami.

Łączenie napisów

Spróbuj połączyć dwa napisy operatorem +. Nazywa sie to łączniem napisów. Spróbuj wprowadzić 'witaj' + 'świecie!' w powłoce:

>>> 'witaj' + 'świecie!'
'witajświecie!'

Wyrażenie jest obliczane do pojedynczego napisu: 'witajświecie!'. Aby słowa były oddzielone wstaw spację na końcy napisu 'witaj' , przed cudzysłowem:

>>> 'witaj ' + 'świecie!'
'witaj świecie!'

Operator + działa inaczej dla napisów i inaczej dla liczb, bo są to różne typy danych. Wszystkie wartości mają swój typ. Typem dla wartości 'witaj' jest napis (ang: string). Typem wartości 5 jest liczba całkowita. Typ danej mówi Pythonowi jakie co operatory powinny zrobić by obliczyć wyrażenie. Oprator + połączy dwa napisy, ale doda liczby całkowite, lub zmiennoprzecinkowe.

Pisanie programów w edytorze plikó IDLE

Dotychczas wpisywałeś instrukcje w interaktywnej powłoce IDLE wykonując je pojedynczo. Jednak gdy piszesz program, wypisujesz wiele instrukcji i wykonujesz je razem. Napiszmy pierwszy program!

IDLE ma wbudowany edytor plików. Kliknij na menu File (Plik) na górze okna Python Shell. Teraz wybierz New Window (Nowe okno). Pojawi się puste okno byś mógł wpisać w nim kod swojego programu.



Rysunek 3-1: Okno edytora tekstu.

Oba okna wyglądają podobnie, ale pamiętaj: okno powłoki ma znak zachęty >>>. Okno edytora plików go nie ma.

witaj świecie!

Tradycją programostów jest, by ich pierwszy program wyświetlał na ekranie napis "witaj świecie". Teraz stworzymy taki program.

Kiedy wprowadzasz kod programu nie wpisuj numerów które są po lewej stronie kody. Są one po to, by w książce odnosić się do danej linii kodu. W dolnym prawym rogu okna edytora jest informacja gdzie znajduje się mrugający kursor. Rysunek 3-2 pokazuje przykład wskazania na położenie kursora w edytorze.



Rysunek 3-2: Dolny prawy róg edytora tekstu pokazuje w jakiej linii jest kursor.

hello.py

Wprowadź następujący tekst w nowym oknie edytora tekstu. To jest tekst źródłowy programu. Zawiera on instrukcje jakie wykona Python, gdy proram zostanie uruchomiony. Pamiętaj, by nie wpisywać numerów linii!

WAŻNA UWAGA! Programy w tej książe da się uruchomić jedynie z użyciem Pythona 3, a nie Pythona 2. Kiedy uruchomimy okno edytora IDLE, pokaż on coś w stylu “Python 3.4.0” an górze okna. Jeśli masz zainstalowanego Pythona 2, to możesz mieć także zainstalowanego Pythona 3. Aby pobrać Pythona 3 odwiedź https://python.org/download/.

1. # Ten program wypisuje napisy i pyta o imię
2. print('Witaj świecie!')
3. print('Jak masz na imię?')
4. myName = input()
5. print(myName + ', miło Cię poznać')


Edytor IDLE będzie używał różnych kolorów dla różnych typów instrukcji. Gdy skończysz wpisywanie kody okno edytora będzie wyglądało podobnie do:



Rysunek 3-3: Wygląd okna edytora po wpisaniu kodu.

Zapisywanie programu

Jak już skończysz wprowadzanie kodu źródłowego zapisz go klikając menu File (Plik) na górze okna edytora. Później wybierz Save As (Zapisz jako). Rysunek 3-4 pokazuje otwarte okno Save As. Wpisz hello.py w polu File name (Nazwa pliku) i kliknij Save (Zapisz). Albo wciścij Ctrl-S co jest skrótem klawiaturowym tej operacji.



Rysunek 3-4: Zapisywanie programu

Powinieneś zapisywać programy w trakcie ich pisania. W ten sposób, jeśli komputer ulegnie awarii, albo przez pomyłkę wyjdziesz z edytora, to nie stracisz wiele pracy.

Otwieranie programu jaki zapisałeś

By wczytać zapisany program kliknij File ► Open (Plik ► Otwórz). Wybierz hello.py w oknie jakie się pojawu i kliknij przycisk Open (Otwórz). Zapisany wcześniej program hello.py pojawi się w oknie edytora.

Nadszedł czas uruchomienia programu. Kliknij File ► Run ► Run Module (Plik ► Uruchom ► Uruchom modłuł), lub wciśnij F5 będąc w oknie edytora. Twój program zostanie uruchomiony w oknie interaktywnej powłoki.

Podaj swoje imię, gdy program o nie spyta. Będzie to wyglądało jak na rysunku 3-5:



Rysunek 3-5: Interaktywna powłoka po uruchomieniu hello.py.

Kiedy wpiszesz swoje imię i naciśniesz ENTER origram cię pozdrowi używając twojego imienia. Gratulacje! Właśnie napisałeś swój pierwszy program i teraz jesteś programistą. Ponownie naciśnij F5 i podaj inne imię.

Jeśli uzyskasz błąd, to porównaj swój kod z kodem z książki za pomocą narzędzia do porównywania ze strony http://invpy.com/diff/hello.

Jeśli błąd wygląda jak:

Witaj świecie!
Jak masz na imię?
Albert
Traceback (most recent call last):
  File "C:/Python26/test1.py", line 4, in <module>
    myName = input()
  File "<string>", line 1, in <module>
NameError: name 'Albert' is not defined

...to oznacza, że używasz Pythona 2 zamiast Pythona 3. Zainstaluj Pythona 3 ze strony http://python.org. Potem urucho program ponownie, tym razem za pomocą Pythona 3.

Jak działa program “Witaj świecie”

Każda linia kodu jest instrukcją interpretowaną przez Pythona. Te instrukcje tworzą program. Instrukcje w programie sa jak kolejne kroki w przepisie na ciasto. Każda instrukcja jest wykonywana po kolei zaczynając og góry programu.

Krokowe wykonywanie programu jest nazywane przepływem wykonania, lub po prostu wykonaniem. Kiedy program rozpoczyna pracę, to wykonuje pierwszą linię. Potem idzie w dół do następnej instrukcji.

Przypatrzmy się każdej linii kodu i omówmy co one robą. Zaczniemy od linii o numerze 1.

Komentarze

1. # Ten program wypisuje napisy i pyta o imię

Ta linia to komentarz. Dowolny tekst po znaku # (znanym także jako hasz, lub płotek) jest komentarzem. Komentarze nie są dla Pythona, ale dla ciebie, programisty. Python ignoruje komentarze. Komentarze są notatkami mówiącymi co robi kod i są skierowane dla ciebie, lub dla innych programistów analizujących kod źródłowy. Aby w tej książce było łatwiej czytać kod, komentarze są w jasno szarym kolorze.

programiści zwykle wstawiają komentarze na górze swojego programu, by nadać mu tytuł. Program IDLEwyświetla komentarze kolorem czerwonym by je wyróżnić.

Funkcje

Funkcja jest rodzajem mini-programu w twoim programie. Funkcja zawiera instrukcje do wywołania gdy funkcja zostanie wywołana. Python dostarcza wiele wbudowanych funkcji. Dwie z nich: print() i input(), zaraz omówimy. Świetną rzeczą w funkcjach jest to, że potrzebujesz tylko wiedzę na temat tego, co funkcja robi, a nie jak to robi.

Wywołanie funkcji to fragment kodu który mówi Pythonowi by wykonac kod znajdujący się w funkcji. Przykładowo program wywołuje funkcję print() by wyświetlić napis na ekranie. Funkcja print() pobiera napis jaki wpisałeś między nawiasami jako wejście i wypisuje go na ekranie. Aby wyposać Witaj świecie! na ekranie wspisz nazwę funkcji: print, potem otwórz nawias, wpisz napis 'Witah świecie!' i zamknij nawias.

Funkcja print()

2. print('Witaj świecie!')
3. print('Jak masz na imię?')

Linie 2 i 3 są wywołaniami funkcji print(). Wartość pomiędzy nawiasami to argument. Argumentem funkcji print() w linii 2 jest 'Witaj świecie!'. Argumentem funkcji pront() w linii 3 jest 'Jak masz na imię?'. Nazywane to jest przekazywaniem argumentów do funkcji print().

W tej książce nazwy funkcji mają nawiasy na końcu. Dzięki temu jasne jest, że mamy do czynienia z funkcją o nazwie print(), a nie ze zmienną print. To troche jak cudzysłowia otaczające numer '42', które mówią Pythonowi, że ma do czynienia z napisem '42', a nie z liczbą całkowitą 43.

The input() function

4. myName = input()

This line has an assignment statement with a variable (myName) and a function call (input()). When input() is called, the program waits for the user to enter text. The text string that the user enters becomes the value that the function call evaluates to. Function calls can be used in expressions anywhere a value can be used.

The value that the function call evaluates to is the return value. (In fact, “the value a function call returns” means the same thing as “the value a function call evaluates to”.) In this case, the return value of the input() function is the string that the user typed in-their name. If the user typed in “Albert”, the input() function call evaluates to the string 'Albert'. This evaluation looks like this:

myName = input()
            ▼
myName = 'Albert'

This is how the string value 'Albert' gets stored in the myName variable.

Using Expressions in Function Calls

5. print('It is good to meet you, ' + myName)

The last line is another print() function call. The expression 'It is good to meet you, ' + myName is passed to print(). However, arguments are always single values. Python will first evaluate this expression and then pass the value as the argument. If 'Albert' is stored in myName, the evaluation looks like this:

print('It is good to meet you, ' + myName)
                         ▼
print('It is good to meet you, ' + 'Albert')
                         ▼
print('It is good to meet you, Albert')

This is how the program greets the user by name.

Ending the Program

Once the program executes the last line, it terminates or exits. This means the program stops running. Python forgets all of the variables, including the string stored in myName. If you run the program again with a different name, the program will think that different string is your name.

Hello świecie!
What is your name?
Carolyn
It is good to meet you, Carolyn

Remember, the computer does exactly what you program it to do. Computers are dumb. The computer doesn’t care if you type in your name, someone else’s name, or just something silly. Type in anything you want. The computer will treat it the same way:

Hello świecie!
What is your name?
poop
It is good to meet you, poop

Variable Names

Giving variables descriptive names makes it easier to understand what a program does. Imagine if you were moving to a new house and you labeled every moving box “Stuff”. That wouldn’t be helpful at all!

Instead of myName, you could have called this variable abrahamLincoln or nAmE. Python doesn’t care. It will run the program just the same.

Variable names are case-sensitive. Case-sensitive means the same variable name in a different case is a different variable. So spam, SPAM, Spam, and sPAM are four different variables in Python. They each contain their own separate values.

It’s a bad idea to have differently cased variables in your program. If you stored your first name in the variable name and your last name in the variable NAME, it would be confusing when you read your code weeks after you first wrote it. Did name mean first and NAME mean last, or the other way around?

Variable names are usually lowercase. If there is more than one word in the variable name, capitalize each word after the first. This makes your code more readable. For example, the variable name whatIHadForBreakfastThisMorning is much easier to read than whatihadforbreakfastthismorning. This is a convention: an optional but standard way of doing things) in Python programming.

This book’s interactive shell examples use variable names like spam, eggs, ham, and bacon. This is because the variable names in these examples don’t matter. However, this book’s programs all use descriptive names. Your programs should also use descriptive variable names.

Summary

Once you learn about strings and functions, you can start making programs that interact with users. This is important because text is the main way the user and the computer will communicate with each other. The user enters text through the keyboard with the input() function, and the computer will display text on the screen with the print() function.

Strings are just values of a new data type. All values have a data type, and there are many data types in Python. The + operator can concatenate strings together.

Variables let you remember values to use in later parts of the program. Functions are used to carry out some complicated instruction as part of your program. Python has many built-in functions that you’ll learn about in this book. Variables and function calls can be used in expressions anywhere a value is used.

The instruction in your program that Python is currently following is the execution. In the next chapter, you’ll learn more about making the execution move in ways other than just straight down the program. Once you learn this, you’ll be ready to create games.

